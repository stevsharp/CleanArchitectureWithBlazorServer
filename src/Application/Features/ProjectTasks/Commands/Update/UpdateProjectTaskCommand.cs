//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdateProjectTaskCommand & handler: updates an existing ProjectTask with cache invalidation and raises ProjectTaskUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/projecttask
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.ProjectTasks.DTOs;
using CleanArchitecture.Blazor.Application.Features.ProjectTasks.Caching;

namespace CleanArchitecture.Blazor.Application.Features.ProjectTasks.Commands.Update;

public class UpdateProjectTaskCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Project id")]
    public int ProjectId {get;set;} 
    [Description("Project")]
    public ProjectDto? Project {get;set;} 
    [Description("Assigned to id")]
    public int? AssignedToId {get;set;} 
    [Description("Assigned to")]
    public EmployeeDto? AssignedTo {get;set;} 
    [Description("Title")]
    public string? Title {get;set;} 
    [Description("Description")]
    public string? Description {get;set;} 
    [Description("Deadline")]
    public DateTime? Deadline {get;set;} 
    [Description("Status")]
    public CleanArchitecture.Blazor.Domain.Entities.TaskStatus? Status {get;set;} 
    [Description("Priority")]
    public TaskPriority? Priority {get;set;} 

      public string CacheKey => ProjectTaskCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => ProjectTaskCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateProjectTaskCommand, ProjectTask>(MemberList.None);
            CreateMap<ProjectTaskDto,UpdateProjectTaskCommand>(MemberList.None);
        }
    }

}

public class UpdateProjectTaskCommandHandler : IRequestHandler<UpdateProjectTaskCommand, Result<int>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;;
    private readonly IMapper _mapper;
    public UpdateProjectTaskCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _context = context;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateProjectTaskCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.ProjectTasks.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"ProjectTask with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new ProjectTaskUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

