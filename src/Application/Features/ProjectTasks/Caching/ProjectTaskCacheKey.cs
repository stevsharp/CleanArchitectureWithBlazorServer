//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-24
//     Last Modified: 2025-09-24
//     Description: 
//       Defines static methods and properties for managing cache keys and expiration 
//       settings for ProjectTask-related data. This includes creating unique cache keys for 
//       various projecttask queries (such as getting all projecttasks, projecttasks by ID, etc.), 
//       managing the cache expiration tokens to control cache validity, and providing a 
//       mechanism to refresh cached data in a thread-safe manner.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

namespace CleanArchitecture.Blazor.Application.Features.ProjectTasks.Caching;
/// <summary>
/// Static class for managing cache keys and expiration for ProjectTask-related data.
/// </summary>
public static class ProjectTaskCacheKey
{
    public const string GetAllCacheKey = "all-ProjectTasks";
    public static string GetPaginationCacheKey(string parameters) {
        return $"ProjectTaskCacheKey:ProjectTasksWithPaginationQuery,{parameters}";
    }
    public static string GetExportCacheKey(string parameters) {
        return $"ProjectTaskCacheKey:ExportCacheKey,{parameters}";
    }
    public static string GetByNameCacheKey(string parameters) {
        return $"ProjectTaskCacheKey:GetByNameCacheKey,{parameters}";
    }
    public static string GetByIdCacheKey(string parameters) {
        return $"ProjectTaskCacheKey:GetByIdCacheKey,{parameters}";
    }
    public static IEnumerable<string>? Tags => new string[] { "projecttask" };
    public static void Refresh()
    {
        FusionCacheFactory.RemoveByTags(Tags);
    }
}

