//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-24
//     Last Modified: 2025-09-24
//     Description: 
//       Defines a query to retrieve a document by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same document.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Documents.DTOs;
using CleanArchitecture.Blazor.Application.Features.Documents.Caching;
using CleanArchitecture.Blazor.Application.Features.Documents.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Documents.Queries.GetById;

public class GetDocumentByIdQuery : ICacheableRequest<Result<DocumentDto>>
{
   public required int Id { get; set; }
    public string CacheKey => ""; //DocumentCacheKey.GetByIdCacheKey($"{Id}");
   public IEnumerable<string>? Tags => DocumentCacheKey.Tags;
}

public class GetDocumentByIdQueryHandler :
     IRequestHandler<GetDocumentByIdQuery, Result<DocumentDto>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    public GetDocumentByIdQueryHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _mapper = mapper;
        _context = context;
    }

    public async Task<Result<DocumentDto>> Handle(GetDocumentByIdQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.Documents.ApplySpecification(new DocumentByIdSpecification(request.Id))
                                                .ProjectTo<DocumentDto>(_mapper.ConfigurationProvider)
                                                .FirstAsync(cancellationToken) ?? throw new NotFoundException($"Document with id: [{request.Id}] not found.");
        return await Result<DocumentDto>.SuccessAsync(data);
    }
}
