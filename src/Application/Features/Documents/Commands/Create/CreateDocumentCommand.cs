//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command and handler for creating a new Document.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/document
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Documents.Caching;
using CleanArchitecture.Blazor.Application.Features.Tenants.DTOs;

namespace CleanArchitecture.Blazor.Application.Features.Documents.Commands.Create;

public class CreateDocumentCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Title")]
    public string? Title {get;set;} 
    [Description("Description")]
    public string? Description {get;set;} 
    [Description("Status")]
    public JobStatus? Status {get;set;} 
    [Description("Content")]
    public string? Content {get;set;} 
    [Description("Is public")]
    public bool IsPublic {get;set;} 
    [Description("Url")]
    public string? URL {get;set;} 
    [Description("Document type")]
    public DocumentType? DocumentType {get;set;} 
    [Description("Tenant")]
    public TenantDto? Tenant {get;set;} 
    [Description("Tenant id")]
    public string? TenantId {get;set;} 

      public string CacheKey => DocumentCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => DocumentCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateDocumentCommand, Document>(MemberList.None);
        }
    }
}
    
    public class CreateDocumentCommandHandler : IRequestHandler<CreateDocumentCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        public CreateDocumentCommandHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory)
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
    }
        public async Task<Result<int>> Handle(CreateDocumentCommand request, CancellationToken cancellationToken)
        {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<Document>(request);
           // raise a create domain event
	       item.AddDomainEvent(new DocumentCreatedEvent(item));
           _context.Documents.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

