//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdateQuoteVersionCommand & handler: updates an existing QuoteVersion with cache invalidation and raises QuoteVersionUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/quoteversion
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.QuoteVersions.DTOs;
using CleanArchitecture.Blazor.Application.Features.QuoteVersions.Caching;

namespace CleanArchitecture.Blazor.Application.Features.QuoteVersions.Commands.Update;

public class UpdateQuoteVersionCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Quote id")]
    public int QuoteId {get;set;} 
    [Description("Quote")]
    public QuoteDto? Quote {get;set;} 
    [Description("Version number")]
    public int VersionNumber {get;set;} 
    [Description("Created at utc")]
    public DateTime? CreatedAtUtc {get;set;} 
    [Description("Created by employee id")]
    public int CreatedByEmployeeId {get;set;} 
    [Description("Created by employee")]
    public EmployeeDto? CreatedByEmployee {get;set;} 

      public string CacheKey => QuoteVersionCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => QuoteVersionCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateQuoteVersionCommand, QuoteVersion>(MemberList.None);
            CreateMap<QuoteVersionDto,UpdateQuoteVersionCommand>(MemberList.None);
        }
    }

}

public class UpdateQuoteVersionCommandHandler : IRequestHandler<UpdateQuoteVersionCommand, Result<int>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;;
    private readonly IMapper _mapper;
    public UpdateQuoteVersionCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _context = context;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateQuoteVersionCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.QuoteVersions.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"QuoteVersion with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new QuoteVersionUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

