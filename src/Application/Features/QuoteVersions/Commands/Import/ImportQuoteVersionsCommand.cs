//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Import command & template for quoteversions.
// Validates Excel data, prevents duplicates, and provides a template for bulk entry.
// Docs: https://docs.cleanarchitectureblazor.com/features/quoteversion
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.QuoteVersions.DTOs;
using CleanArchitecture.Blazor.Application.Features.QuoteVersions.Caching;

namespace CleanArchitecture.Blazor.Application.Features.QuoteVersions.Commands.Import;

    public class ImportQuoteVersionsCommand: ICacheInvalidatorRequest<Result<int>>
    {
        public string FileName { get; set; }
        public byte[] Data { get; set; }
        public string CacheKey => QuoteVersionCacheKey.GetAllCacheKey;
        public IEnumerable<string>? Tags => QuoteVersionCacheKey.Tags;
        public ImportQuoteVersionsCommand(string fileName,byte[] data)
        {
           FileName = fileName;
           Data = data;
        }
    }
    public record class CreateQuoteVersionsTemplateCommand : IRequest<Result<byte[]>>
    {
 
    }

    public class ImportQuoteVersionsCommandHandler : 
                 IRequestHandler<CreateQuoteVersionsTemplateCommand, Result<byte[]>>,
                 IRequestHandler<ImportQuoteVersionsCommand, Result<int>>
    {
        private readonly IApplicationDbContext _context;
        private readonly IStringLocalizer<ImportQuoteVersionsCommandHandler> _localizer;
        private readonly IExcelService _excelService;
        private readonly QuoteVersionDto _dto = new();
        private readonly IMapper _mapper;
        public ImportQuoteVersionsCommandHandler(
            IApplicationDbContext context,
            IMapper mapper,
            IExcelService excelService,
            IStringLocalizer<ImportQuoteVersionsCommandHandler> localizer)
        {
            _context = context;
            _localizer = localizer;
            _excelService = excelService;
            _mapper = mapper;
        }
        #nullable disable warnings
        public async Task<Result<int>> Handle(ImportQuoteVersionsCommand request, CancellationToken cancellationToken)
        {

           var result = await _excelService.ImportAsync(request.Data, mappers: new Dictionary<string, Func<DataRow, QuoteVersionDto, object?>>
            {
                                { _localizer[_dto.GetMemberDescription(x=>x.QuoteId)], (row, item) => item.QuoteId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.QuoteId)]]) }, 
                { _localizer[_dto.GetMemberDescription(x=>x.VersionNumber)], (row, item) => item.VersionNumber =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.VersionNumber)]]) }, 
                { _localizer[_dto.GetMemberDescription(x=>x.CreatedAtUtc)], (row, item) => item.CreatedAtUtc =DateTime.Parse(row[_localizer[_dto.GetMemberDescription(x=>x.CreatedAtUtc)]].ToString()) }, 
                { _localizer[_dto.GetMemberDescription(x=>x.CreatedByEmployeeId)], (row, item) => item.CreatedByEmployeeId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.CreatedByEmployeeId)]]) }, 

            }, _localizer[_dto.GetClassDescription()]);
            if (result.Succeeded && result.Data is not null)
            {
                foreach (var dto in result.Data)
                {
                    var exists = await _context.QuoteVersions.AnyAsync(x => x.Name == dto.Name, cancellationToken);
                    if (!exists)
                    {
                        var item = _mapper.Map<QuoteVersion>(dto);
                        // add create domain events if this entity implement the IHasDomainEvent interface
				        // item.AddDomainEvent(new QuoteVersionCreatedEvent(item));
                        await _context.QuoteVersions.AddAsync(item, cancellationToken);
                    }
                 }
                 await _context.SaveChangesAsync(cancellationToken);
                 return await Result<int>.SuccessAsync(result.Data.Count());
           }
           else
           {
               return await Result<int>.FailureAsync(result.Errors);
           }
        }
        public async Task<Result<byte[]>> Handle(CreateQuoteVersionsTemplateCommand request, CancellationToken cancellationToken)
        {
            // TODO: Implement ImportQuoteVersionsCommandHandler method 
            var fields = new string[] {
                   // TODO: Define the fields that should be generate in the template, for example:
                   _localizer[_dto.GetMemberDescription(x=>x.QuoteId)], 
_localizer[_dto.GetMemberDescription(x=>x.VersionNumber)], 
_localizer[_dto.GetMemberDescription(x=>x.CreatedAtUtc)], 
_localizer[_dto.GetMemberDescription(x=>x.CreatedByEmployeeId)], 

                };
            var result = await _excelService.CreateTemplateAsync(fields, _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
    }

