//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-24
//     Last Modified: 2025-09-24
//     Description: 
//       Defines a query to export quoteline data to an Excel file. This query 
//       applies advanced filtering options and generates an Excel file with 
//       the specified quoteline details.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.QuoteLines.DTOs;
using CleanArchitecture.Blazor.Application.Features.QuoteLines.Caching;
using CleanArchitecture.Blazor.Application.Features.QuoteLines.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.QuoteLines.Queries.Export;

public class ExportQuoteLinesQuery : QuoteLineAdvancedFilter, ICacheableRequest<Result<byte[]>>
{
      public QuoteLineAdvancedSpecification Specification => new QuoteLineAdvancedSpecification(this);
      public IEnumerable<string>? Tags => QuoteLineCacheKey.Tags;
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}";
    }
    public string CacheKey => QuoteLineCacheKey.GetExportCacheKey($"{this}");
}
    
public class ExportQuoteLinesQueryHandler :
         IRequestHandler<ExportQuoteLinesQuery, Result<byte[]>>
{
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        private readonly IExcelService _excelService;
        private readonly IStringLocalizer<ExportQuoteLinesQueryHandler> _localizer;
        private readonly QuoteLineDto _dto = new();
        public ExportQuoteLinesQueryHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory,
            IExcelService excelService,
            IStringLocalizer<ExportQuoteLinesQueryHandler> localizer
            )
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
            _excelService = excelService;
            _localizer = localizer;
        }
        #nullable disable warnings
        public async Task<Result<byte[]>> Handle(ExportQuoteLinesQuery request, CancellationToken cancellationToken)
    {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await _context.QuoteLines.ApplySpecification(request.Specification)
                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
                       .ProjectTo<QuoteLineDto>(_mapper.ConfigurationProvider)
                       .AsNoTracking()
                       .ToListAsync(cancellationToken);
            var result = await _excelService.ExportAsync(data,
                new Dictionary<string, Func<QuoteLineDto, object?>>()
                {
                    // TODO: Define the fields that should be exported, for example:
                                     {_localizer[_dto.GetMemberDescription(x=>x.QuoteVersionId)],item => item.QuoteVersionId}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.ServiceId)],item => item.ServiceId}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.VariantId)],item => item.VariantId}, 
                    {_localizer[_dto.GetMemberDescription(x=>x.PricingModel)],item => item.PricingModel?.ToString()}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Qty)],item => item.Qty}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.UnitPrice)],item => item.UnitPrice}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.LineTotal)],item => item.LineTotal}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.VenueId)],item => item.VenueId}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Pax)],item => item.Pax}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.MediaBudget)],item => item.MediaBudget}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.AgencyFeePct)],item => item.AgencyFeePct}, 

                }
                , _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
}
