//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdateQuoteLineCommand & handler: updates an existing QuoteLine with cache invalidation and raises QuoteLineUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/quoteline
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.QuoteLines.DTOs;
using CleanArchitecture.Blazor.Application.Features.QuoteLines.Caching;

namespace CleanArchitecture.Blazor.Application.Features.QuoteLines.Commands.Update;

public class UpdateQuoteLineCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Quote version id")]
    public int QuoteVersionId {get;set;} 
    [Description("Version")]
    public QuoteVersionDto? Version {get;set;} 
    [Description("Service id")]
    public int ServiceId {get;set;} 
    [Description("Service")]
    public ServiceDto? Service {get;set;} 
    [Description("Variant id")]
    public int? VariantId {get;set;} 
    [Description("Variant")]
    public ServiceVariantDto? Variant {get;set;} 
    [Description("Pricing model")]
    public PricingModelType? PricingModel {get;set;} 
    [Description("Qty")]
    public decimal Qty {get;set;} 
    [Description("Unit price")]
    public decimal UnitPrice {get;set;} 
    [Description("Line total")]
    public decimal LineTotal {get;set;} 
    [Description("Venue id")]
    public int? VenueId {get;set;} 
    [Description("Venue")]
    public VenueDto? Venue {get;set;} 
    [Description("Pax")]
    public int? Pax {get;set;} 
    [Description("Media budget")]
    public decimal? MediaBudget {get;set;} 
    [Description("Agency fee pct")]
    public decimal? AgencyFeePct {get;set;} 

      public string CacheKey => QuoteLineCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => QuoteLineCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateQuoteLineCommand, QuoteLine>(MemberList.None);
            CreateMap<QuoteLineDto,UpdateQuoteLineCommand>(MemberList.None);
        }
    }

}

public class UpdateQuoteLineCommandHandler : IRequestHandler<UpdateQuoteLineCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    public UpdateQuoteLineCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _context = context;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateQuoteLineCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.QuoteLines.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"QuoteLine with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new QuoteLineUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

