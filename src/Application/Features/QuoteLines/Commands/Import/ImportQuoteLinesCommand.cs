////------------------------------------------------------------------------------
//// <auto-generated>
//// CleanArchitecture.Blazor - MIT Licensed.
//// Author: neozhu
//// Created/Modified: 2025-09-24
//// Import command & template for quotelines.
//// Validates Excel data, prevents duplicates, and provides a template for bulk entry.
//// Docs: https://docs.cleanarchitectureblazor.com/features/quoteline
//// </auto-generated>
////------------------------------------------------------------------------------
//#nullable enable
//#nullable disable warnings

//using CleanArchitecture.Blazor.Application.Features.QuoteLines.DTOs;
//using CleanArchitecture.Blazor.Application.Features.QuoteLines.Caching;

//namespace CleanArchitecture.Blazor.Application.Features.QuoteLines.Commands.Import;

//    public class ImportQuoteLinesCommand: ICacheInvalidatorRequest<Result<int>>
//    {
//        public string FileName { get; set; }
//        public byte[] Data { get; set; }
//        public string CacheKey => QuoteLineCacheKey.GetAllCacheKey;
//        public IEnumerable<string>? Tags => QuoteLineCacheKey.Tags;
//        public ImportQuoteLinesCommand(string fileName,byte[] data)
//        {
//           FileName = fileName;
//           Data = data;
//        }
//    }
//    public record class CreateQuoteLinesTemplateCommand : IRequest<Result<byte[]>>
//    {
 
//    }

//    public class ImportQuoteLinesCommandHandler : 
//                 IRequestHandler<CreateQuoteLinesTemplateCommand, Result<byte[]>>,
//                 IRequestHandler<ImportQuoteLinesCommand, Result<int>>
//    {
//        private readonly IApplicationDbContextFactory _dbContextFactory;;
//        private readonly IStringLocalizer<ImportQuoteLinesCommandHandler> _localizer;
//        private readonly IExcelService _excelService;
//        private readonly QuoteLineDto _dto = new();
//        private readonly IMapper _mapper;
//        public ImportQuoteLinesCommandHandler(
//            IApplicationDbContext context,
//            IMapper mapper,
//            IExcelService excelService,
//            IStringLocalizer<ImportQuoteLinesCommandHandler> localizer)
//        {
//            _context = context;
//            _localizer = localizer;
//            _excelService = excelService;
//            _mapper = mapper;
//        }
//        #nullable disable warnings
//        public async Task<Result<int>> Handle(ImportQuoteLinesCommand request, CancellationToken cancellationToken)
//        {

//           var result = await _excelService.ImportAsync(request.Data, mappers: new Dictionary<string, Func<DataRow, QuoteLineDto, object?>>
//            {
//                                { _localizer[_dto.GetMemberDescription(x=>x.QuoteVersionId)], (row, item) => item.QuoteVersionId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.QuoteVersionId)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.ServiceId)], (row, item) => item.ServiceId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.ServiceId)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.VariantId)], (row, item) => item.VariantId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.VariantId)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.PricingModel)], (row, item) => item.PricingModel = Enum.Parse<PricingModelType>(row[_localizer[_dto.GetMemberDescription(x=>x.PricingModel)]].ToString()) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.Qty)], (row, item) => item.Qty =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.Qty)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.UnitPrice)], (row, item) => item.UnitPrice =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.UnitPrice)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.LineTotal)], (row, item) => item.LineTotal =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.LineTotal)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.VenueId)], (row, item) => item.VenueId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.VenueId)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.Pax)], (row, item) => item.Pax =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.Pax)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.MediaBudget)], (row, item) => item.MediaBudget =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.MediaBudget)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.AgencyFeePct)], (row, item) => item.AgencyFeePct =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.AgencyFeePct)]]) }, 

//            }, _localizer[_dto.GetClassDescription()]);
//            if (result.Succeeded && result.Data is not null)
//            {
//                foreach (var dto in result.Data)
//                {
//                    var exists = await _context.QuoteLines.AnyAsync(x => x.Name == dto.Name, cancellationToken);
//                    if (!exists)
//                    {
//                        var item = _mapper.Map<QuoteLine>(dto);
//                        // add create domain events if this entity implement the IHasDomainEvent interface
//				        // item.AddDomainEvent(new QuoteLineCreatedEvent(item));
//                        await _context.QuoteLines.AddAsync(item, cancellationToken);
//                    }
//                 }
//                 await _context.SaveChangesAsync(cancellationToken);
//                 return await Result<int>.SuccessAsync(result.Data.Count());
//           }
//           else
//           {
//               return await Result<int>.FailureAsync(result.Errors);
//           }
//        }
//        public async Task<Result<byte[]>> Handle(CreateQuoteLinesTemplateCommand request, CancellationToken cancellationToken)
//        {
//            // TODO: Implement ImportQuoteLinesCommandHandler method 
//            var fields = new string[] {
//                   // TODO: Define the fields that should be generate in the template, for example:
//                   _localizer[_dto.GetMemberDescription(x=>x.QuoteVersionId)], 
//_localizer[_dto.GetMemberDescription(x=>x.ServiceId)], 
//_localizer[_dto.GetMemberDescription(x=>x.VariantId)], 
//_localizer[_dto.GetMemberDescription(x=>x.Qty)], 
//_localizer[_dto.GetMemberDescription(x=>x.UnitPrice)], 
//_localizer[_dto.GetMemberDescription(x=>x.LineTotal)], 
//_localizer[_dto.GetMemberDescription(x=>x.VenueId)], 
//_localizer[_dto.GetMemberDescription(x=>x.Pax)], 
//_localizer[_dto.GetMemberDescription(x=>x.MediaBudget)], 
//_localizer[_dto.GetMemberDescription(x=>x.AgencyFeePct)], 

//                };
//            var result = await _excelService.CreateTemplateAsync(fields, _localizer[_dto.GetClassDescription()]);
//            return await Result<byte[]>.SuccessAsync(result);
//        }
//    }

