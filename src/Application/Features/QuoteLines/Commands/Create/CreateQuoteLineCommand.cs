//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command and handler for creating a new QuoteLine.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/quoteline
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.QuoteLines.Caching;

namespace CleanArchitecture.Blazor.Application.Features.QuoteLines.Commands.Create;

public class CreateQuoteLineCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Quote version id")]
    public int QuoteVersionId {get;set;} 
    [Description("Version")]
    public QuoteVersionDto? Version {get;set;} 
    [Description("Service id")]
    public int ServiceId {get;set;} 
    [Description("Service")]
    public ServiceDto? Service {get;set;} 
    [Description("Variant id")]
    public int? VariantId {get;set;} 
    [Description("Variant")]
    public ServiceVariantDto? Variant {get;set;} 
    [Description("Pricing model")]
    public PricingModelType? PricingModel {get;set;} 
    [Description("Qty")]
    public decimal Qty {get;set;} 
    [Description("Unit price")]
    public decimal UnitPrice {get;set;} 
    [Description("Line total")]
    public decimal LineTotal {get;set;} 
    [Description("Venue id")]
    public int? VenueId {get;set;} 
    [Description("Venue")]
    public VenueDto? Venue {get;set;} 
    [Description("Pax")]
    public int? Pax {get;set;} 
    [Description("Media budget")]
    public decimal? MediaBudget {get;set;} 
    [Description("Agency fee pct")]
    public decimal? AgencyFeePct {get;set;} 

      public string CacheKey => QuoteLineCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => QuoteLineCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateQuoteLineCommand, QuoteLine>(MemberList.None);
        }
    }
}
    
    public class CreateQuoteLineCommandHandler : IRequestHandler<CreateQuoteLineCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;;
        public CreateQuoteLineCommandHandler(
            IMapper mapper,
            IApplicationDbContext context)
        {
            _mapper = mapper;
            _context = context;
        }
        public async Task<Result<int>> Handle(CreateQuoteLineCommand request, CancellationToken cancellationToken)
        {
           var item = _mapper.Map<QuoteLine>(request);
           // raise a create domain event
	       item.AddDomainEvent(new QuoteLineCreatedEvent(item));
           _context.QuoteLines.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

