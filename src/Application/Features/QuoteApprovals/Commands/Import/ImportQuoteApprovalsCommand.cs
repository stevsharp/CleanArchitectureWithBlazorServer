////------------------------------------------------------------------------------
//// <auto-generated>
//// CleanArchitecture.Blazor - MIT Licensed.
//// Author: neozhu
//// Created/Modified: 2025-09-24
//// Import command & template for quoteapprovals.
//// Validates Excel data, prevents duplicates, and provides a template for bulk entry.
//// Docs: https://docs.cleanarchitectureblazor.com/features/quoteapproval
//// </auto-generated>
////------------------------------------------------------------------------------
//#nullable enable
//#nullable disable warnings

//using CleanArchitecture.Blazor.Application.Features.QuoteApprovals.DTOs;
//using CleanArchitecture.Blazor.Application.Features.QuoteApprovals.Caching;

//namespace CleanArchitecture.Blazor.Application.Features.QuoteApprovals.Commands.Import;

//    public class ImportQuoteApprovalsCommand: ICacheInvalidatorRequest<Result<int>>
//    {
//        public string FileName { get; set; }
//        public byte[] Data { get; set; }
//        public string CacheKey => QuoteApprovalCacheKey.GetAllCacheKey;
//        public IEnumerable<string>? Tags => QuoteApprovalCacheKey.Tags;
//        public ImportQuoteApprovalsCommand(string fileName,byte[] data)
//        {
//           FileName = fileName;
//           Data = data;
//        }
//    }
//    public record class CreateQuoteApprovalsTemplateCommand : IRequest<Result<byte[]>>
//    {
 
//    }

//    public class ImportQuoteApprovalsCommandHandler : 
//                 IRequestHandler<CreateQuoteApprovalsTemplateCommand, Result<byte[]>>,
//                 IRequestHandler<ImportQuoteApprovalsCommand, Result<int>>
//    {
//        private readonly IApplicationDbContextFactory _dbContextFactory;;
//        private readonly IStringLocalizer<ImportQuoteApprovalsCommandHandler> _localizer;
//        private readonly IExcelService _excelService;
//        private readonly QuoteApprovalDto _dto = new();
//        private readonly IMapper _mapper;
//        public ImportQuoteApprovalsCommandHandler(
//            IApplicationDbContext context,
//            IMapper mapper,
//            IExcelService excelService,
//            IStringLocalizer<ImportQuoteApprovalsCommandHandler> localizer)
//        {
//            _context = context;
//            _localizer = localizer;
//            _excelService = excelService;
//            _mapper = mapper;
//        }
//        #nullable disable warnings
//        public async Task<Result<int>> Handle(ImportQuoteApprovalsCommand request, CancellationToken cancellationToken)
//        {

//           var result = await _excelService.ImportAsync(request.Data, mappers: new Dictionary<string, Func<DataRow, QuoteApprovalDto, object?>>
//            {
//                                { _localizer[_dto.GetMemberDescription(x=>x.QuoteId)], (row, item) => item.QuoteId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.QuoteId)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.ApproverId)], (row, item) => item.ApproverId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.ApproverId)]]) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.Status)], (row, item) => item.Status = Enum.Parse<ApprovalStatus>(row[_localizer[_dto.GetMemberDescription(x=>x.Status)]].ToString()) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.ApprovedAtUtc)], (row, item) => item.ApprovedAtUtc =DateTime.Parse(row[_localizer[_dto.GetMemberDescription(x=>x.ApprovedAtUtc)]].ToString()) }, 
//                { _localizer[_dto.GetMemberDescription(x=>x.Comment)], (row, item) => item.Comment = row[_localizer[_dto.GetMemberDescription(x=>x.Comment)]].ToString() }, 

//            }, _localizer[_dto.GetClassDescription()]);
//            if (result.Succeeded && result.Data is not null)
//            {
//                foreach (var dto in result.Data)
//                {
//                    var exists = await _context.QuoteApprovals.AnyAsync(x => x.Name == dto.Name, cancellationToken);
//                    if (!exists)
//                    {
//                        var item = _mapper.Map<QuoteApproval>(dto);
//                        // add create domain events if this entity implement the IHasDomainEvent interface
//				        // item.AddDomainEvent(new QuoteApprovalCreatedEvent(item));
//                        await _context.QuoteApprovals.AddAsync(item, cancellationToken);
//                    }
//                 }
//                 await _context.SaveChangesAsync(cancellationToken);
//                 return await Result<int>.SuccessAsync(result.Data.Count());
//           }
//           else
//           {
//               return await Result<int>.FailureAsync(result.Errors);
//           }
//        }
//        public async Task<Result<byte[]>> Handle(CreateQuoteApprovalsTemplateCommand request, CancellationToken cancellationToken)
//        {
//            // TODO: Implement ImportQuoteApprovalsCommandHandler method 
//            var fields = new string[] {
//                   // TODO: Define the fields that should be generate in the template, for example:
//                   _localizer[_dto.GetMemberDescription(x=>x.QuoteId)], 
//_localizer[_dto.GetMemberDescription(x=>x.ApproverId)], 
//_localizer[_dto.GetMemberDescription(x=>x.ApprovedAtUtc)], 
//_localizer[_dto.GetMemberDescription(x=>x.Comment)], 

//                };
//            var result = await _excelService.CreateTemplateAsync(fields, _localizer[_dto.GetClassDescription()]);
//            return await Result<byte[]>.SuccessAsync(result);
//        }
//    }

