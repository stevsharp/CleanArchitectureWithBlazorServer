//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command and handler for creating a new QuoteApproval.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/quoteapproval
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.QuoteApprovals.Caching;

namespace CleanArchitecture.Blazor.Application.Features.QuoteApprovals.Commands.Create;

public class CreateQuoteApprovalCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Quote id")]
    public int QuoteId {get;set;} 
    [Description("Quote")]
    public QuoteDto? Quote {get;set;} 
    [Description("Approver id")]
    public int ApproverId {get;set;} 
    [Description("Approver")]
    public EmployeeDto? Approver {get;set;} 
    [Description("Status")]
    public ApprovalStatus? Status {get;set;} 
    [Description("Approved at utc")]
    public DateTime? ApprovedAtUtc {get;set;} 
    [Description("Comment")]
    public string? Comment {get;set;} 

      public string CacheKey => QuoteApprovalCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => QuoteApprovalCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateQuoteApprovalCommand, QuoteApproval>(MemberList.None);
        }
    }
}
    
    public class CreateQuoteApprovalCommandHandler : IRequestHandler<CreateQuoteApprovalCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;;
        public CreateQuoteApprovalCommandHandler(
            IMapper mapper,
            IApplicationDbContext context)
        {
            _mapper = mapper;
            _context = context;
        }
        public async Task<Result<int>> Handle(CreateQuoteApprovalCommand request, CancellationToken cancellationToken)
        {
           var item = _mapper.Map<QuoteApproval>(request);
           // raise a create domain event
	       item.AddDomainEvent(new QuoteApprovalCreatedEvent(item));
           _context.QuoteApprovals.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

