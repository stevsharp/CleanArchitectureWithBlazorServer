//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdateQuoteApprovalCommand & handler: updates an existing QuoteApproval with cache invalidation and raises QuoteApprovalUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/quoteapproval
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.QuoteApprovals.DTOs;
using CleanArchitecture.Blazor.Application.Features.QuoteApprovals.Caching;

namespace CleanArchitecture.Blazor.Application.Features.QuoteApprovals.Commands.Update;

public class UpdateQuoteApprovalCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Quote id")]
    public int QuoteId {get;set;} 
    [Description("Quote")]
    public QuoteDto? Quote {get;set;} 
    [Description("Approver id")]
    public int ApproverId {get;set;} 
    [Description("Approver")]
    public EmployeeDto? Approver {get;set;} 
    [Description("Status")]
    public ApprovalStatus? Status {get;set;} 
    [Description("Approved at utc")]
    public DateTime? ApprovedAtUtc {get;set;} 
    [Description("Comment")]
    public string? Comment {get;set;} 

      public string CacheKey => QuoteApprovalCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => QuoteApprovalCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateQuoteApprovalCommand, QuoteApproval>(MemberList.None);
            CreateMap<QuoteApprovalDto,UpdateQuoteApprovalCommand>(MemberList.None);
        }
    }

}

public class UpdateQuoteApprovalCommandHandler : IRequestHandler<UpdateQuoteApprovalCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    public UpdateQuoteApprovalCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _context = context;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateQuoteApprovalCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.QuoteApprovals.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"QuoteApproval with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new QuoteApprovalUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

