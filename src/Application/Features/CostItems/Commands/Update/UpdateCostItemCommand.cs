//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdateCostItemCommand & handler: updates an existing CostItem with cache invalidation and raises CostItemUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/costitem
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.CostItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.CostItems.Caching;

namespace CleanArchitecture.Blazor.Application.Features.CostItems.Commands.Update;

public class UpdateCostItemCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Project id")]
    public int ProjectId {get;set;} 
    [Description("Project")]
    public ProjectDto? Project {get;set;} 
    [Description("Vendor id")]
    public int? VendorId {get;set;} 
    [Description("Vendor")]
    public VendorDto? Vendor {get;set;} 
    [Description("Description")]
    public string? Description {get;set;} 
    [Description("Quantity")]
    public decimal Quantity {get;set;} 
    [Description("Unit cost")]
    public decimal UnitCost {get;set;} 
    [Description("Total cost")]
    public decimal TotalCost {get;set;} 
    [Description("Category")]
    public string? Category {get;set;} 

      public string CacheKey => CostItemCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => CostItemCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateCostItemCommand, CostItem>(MemberList.None);
            CreateMap<CostItemDto,UpdateCostItemCommand>(MemberList.None);
        }
    }

}

public class UpdateCostItemCommandHandler : IRequestHandler<UpdateCostItemCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    public UpdateCostItemCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _context = context;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateCostItemCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.CostItems.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"CostItem with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new CostItemUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

