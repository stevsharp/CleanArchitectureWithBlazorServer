//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-24
//     Last Modified: 2025-09-24
//     Description: 
//       Defines a query for retrieving pricingmodels with pagination and filtering 
//       options. The result is cached to enhance performance for repeated queries.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.PricingModels.DTOs;
using CleanArchitecture.Blazor.Application.Features.PricingModels.Caching;
using CleanArchitecture.Blazor.Application.Features.PricingModels.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.PricingModels.Queries.Pagination;

public class PricingModelsWithPaginationQuery : PricingModelAdvancedFilter, ICacheableRequest<PaginatedData<PricingModelDto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public string CacheKey => PricingModelCacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags => PricingModelCacheKey.Tags;
    public PricingModelAdvancedSpecification Specification => new PricingModelAdvancedSpecification(this);
}
    
public class PricingModelsWithPaginationQueryHandler :
         IRequestHandler<PricingModelsWithPaginationQuery, PaginatedData<PricingModelDto>>
{
        private readonly IApplicationDbContextFactory _dbContextFactory;
        private readonly IMapper _mapper;
        public PricingModelsWithPaginationQueryHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory)
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
    }

        public async Task<PaginatedData<PricingModelDto>> Handle(PricingModelsWithPaginationQuery request, CancellationToken cancellationToken)
        {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await _context.PricingModels.OrderBy($"{request.OrderBy} {request.SortDirection}")
                                                   .ProjectToPaginatedDataAsync<PricingModel, PricingModelDto>(request.Specification,
                                                    request.PageNumber,
                                                    request.PageSize,
                                                    _mapper.ConfigurationProvider,
                                                    cancellationToken);
            return data;
        }
}