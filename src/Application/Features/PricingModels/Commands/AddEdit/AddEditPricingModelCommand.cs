//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command for adding/editing a pricingmodel entity with validation, mapping,
// domain events, and cache invalidation.
// Documentation: https://docs.cleanarchitectureblazor.com/features/pricingmodel
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings


using CleanArchitecture.Blazor.Application.Features.PricingModels.Caching;
using CleanArchitecture.Blazor.Application.Features.PricingModels.DTOs;
namespace CleanArchitecture.Blazor.Application.Features.PricingModels.Commands.AddEdit;

public class AddEditPricingModelCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Type")]
    public PricingModelType? Type {get;set;} 
    [Description("Formula expression")]
    public string? FormulaExpression {get;set;} 
    [Description("Min fee")]
    public decimal? MinFee {get;set;} 
    [Description("Notes")]
    public string? Notes {get;set;} 


      public string CacheKey => PricingModelCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => PricingModelCacheKey.Tags;
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<PricingModelDto, AddEditPricingModelCommand>(MemberList.None);
            CreateMap<AddEditPricingModelCommand, PricingModel>(MemberList.None);
        }
    }
}

public class AddEditPricingModelCommandHandler : IRequestHandler<AddEditPricingModelCommand, Result<int>>
{
    private readonly IMapper _mapper;
    private readonly IApplicationDbContextFactory _dbContextFactory;
    public AddEditPricingModelCommandHandler(
        IMapper mapper,
        IApplicationDbContextFactory  dbContextFactory )
    {
        _mapper = mapper;
        _dbContextFactory = dbContextFactory;
    }
    public async Task<Result<int>> Handle(AddEditPricingModelCommand request, CancellationToken cancellationToken)
    {
        if (request.Id > 0)
        {
            await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
            var item = await _context.PricingModels.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"PricingModel with id: [{request.Id}] not found.");
            }
            item = _mapper.Map(request, item);
			// raise a update domain event
			item.AddDomainEvent(new PricingModelUpdatedEvent(item));
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
            await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
            var item = _mapper.Map<PricingModel>(request);
            // raise a create domain event
			item.AddDomainEvent(new PricingModelCreatedEvent(item));
            _context.PricingModels.Add(item);
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
       
    }
}

