//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdatePricingModelCommand & handler: updates an existing PricingModel with cache invalidation and raises PricingModelUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/pricingmodel
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.PricingModels.DTOs;
using CleanArchitecture.Blazor.Application.Features.PricingModels.Caching;

namespace CleanArchitecture.Blazor.Application.Features.PricingModels.Commands.Update;

public class UpdatePricingModelCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Type")]
    public PricingModelType? Type {get;set;} 
    [Description("Formula expression")]
    public string? FormulaExpression {get;set;} 
    [Description("Min fee")]
    public decimal? MinFee {get;set;} 
    [Description("Notes")]
    public string? Notes {get;set;} 

      public string CacheKey => PricingModelCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => PricingModelCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdatePricingModelCommand, PricingModel>(MemberList.None);
            CreateMap<PricingModelDto,UpdatePricingModelCommand>(MemberList.None);
        }
    }

}

public class UpdatePricingModelCommandHandler : IRequestHandler<UpdatePricingModelCommand, Result<int>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public UpdatePricingModelCommandHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdatePricingModelCommand request, CancellationToken cancellationToken)
    {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = await _context.PricingModels.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"PricingModel with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new PricingModelUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

