//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command and handler for creating a new PricingModel.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/pricingmodel
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.PricingModels.Caching;

namespace CleanArchitecture.Blazor.Application.Features.PricingModels.Commands.Create;

public class CreatePricingModelCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Type")]
    public PricingModelType? Type {get;set;} 
    [Description("Formula expression")]
    public string? FormulaExpression {get;set;} 
    [Description("Min fee")]
    public decimal? MinFee {get;set;} 
    [Description("Notes")]
    public string? Notes {get;set;} 

      public string CacheKey => PricingModelCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => PricingModelCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreatePricingModelCommand, PricingModel>(MemberList.None);
        }
    }
}
    
    public class CreatePricingModelCommandHandler : IRequestHandler<CreatePricingModelCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        public CreatePricingModelCommandHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory)
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
    }
        public async Task<Result<int>> Handle(CreatePricingModelCommand request, CancellationToken cancellationToken)
        {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<PricingModel>(request);
           // raise a create domain event
	       item.AddDomainEvent(new PricingModelCreatedEvent(item));
           _context.PricingModels.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

