//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-21
//     Last Modified: 2025-03-21
//     Description: 
//       This file defines the command, handler, and associated logic for importing 
//       subcategorys from an Excel file into the CleanArchitecture.Blazor application. 
//       The import process supports validating data and ensuring no duplicates are 
//       inserted. Additionally, a command for creating a subcategory template file is provided 
//       to facilitate bulk data entry for end users.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/subcategory
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// - Use `ImportSubCategorysCommand` to import subcategorys from an Excel file, ensuring proper validation
//   and avoiding duplicates.
// - Use `CreateSubCategorysTemplateCommand` to generate an Excel template for entering subcategory data 
//   that can be later imported using the import command.

using CleanArchitecture.Blazor.Application.Features.SubCategories.DTOs;
using CleanArchitecture.Blazor.Application.Features.SubCategories.Caching;
using CleanArchitecture.Blazor.Application.Features.SubCategories.Mappers;

namespace CleanArchitecture.Blazor.Application.Features.SubCategories.Commands.Import;

    public class ImportSubCategoriesCommand: ICacheInvalidatorRequest<Result<int>>
    {
        public string FileName { get; set; }
        public byte[] Data { get; set; }
        public string CacheKey => SubCategoryCacheKey.GetAllCacheKey;
        public IEnumerable<string>? Tags => SubCategoryCacheKey.Tags;
        public ImportSubCategoriesCommand(string fileName,byte[] data)
        {
           FileName = fileName;
           Data = data;
        }
    }
    public record class CreateSubCategoriesTemplateCommand : IRequest<Result<byte[]>>
    {
 
    }

    public class ImportSubCategoriesCommandHandler : 
                 IRequestHandler<CreateSubCategoriesTemplateCommand, Result<byte[]>>,
                 IRequestHandler<ImportSubCategoriesCommand, Result<int>>
    {
        private readonly IApplicationDbContext _context;
        private readonly IStringLocalizer<ImportSubCategoriesCommandHandler> _localizer;
        private readonly IExcelService _excelService;
        private readonly SubCategoryDto _dto = new();

        public ImportSubCategoriesCommandHandler(
            IApplicationDbContext context,
            IExcelService excelService,
            IStringLocalizer<ImportSubCategoriesCommandHandler> localizer)
        {
            _context = context;
            _localizer = localizer;
            _excelService = excelService;
        }
        #nullable disable warnings
        public async Task<Result<int>> Handle(ImportSubCategoriesCommand request, CancellationToken cancellationToken)
        {

           var result = await _excelService.ImportAsync(request.Data, mappers: new Dictionary<string, Func<DataRow, SubCategoryDto, object?>>
            {
                { _localizer[_dto.GetMemberDescription(x=>x.Name)], (row, item) => item.Name = row[_localizer[_dto.GetMemberDescription(x=>x.Name)]].ToString() }, 

            }, _localizer[_dto.GetClassDescription()]);
            if (result.Succeeded && result.Data is not null)
            {
                foreach (var dto in result.Data)
                {
                    var exists = await _context.SubCategories.AnyAsync(x => x.Name == dto.Name, cancellationToken);
                    if (!exists)
                    {
                        var item = SubCategoryMapper.FromDto(dto);
                        // add create domain events if this entity implement the IHasDomainEvent interface
				        // item.AddDomainEvent(new SubCategoryCreatedEvent(item));
                        await _context.SubCategories.AddAsync(item, cancellationToken);
                    }
                 }
                 await _context.SaveChangesAsync(cancellationToken);
                 return await Result<int>.SuccessAsync(result.Data.Count());
           }
           else
           {
               return await Result<int>.FailureAsync(result.Errors);
           }
        }
        public async Task<Result<byte[]>> Handle(CreateSubCategoriesTemplateCommand request, CancellationToken cancellationToken)
        {
            // TODO: Implement ImportSubCategoriesCommandHandler method 
            var fields = new string[] {
                   // TODO: Define the fields that should be generate in the template, for example:
                   _localizer[_dto.GetMemberDescription(x=>x.Name)], 

                };
            var result = await _excelService.CreateTemplateAsync(fields, _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
    }

