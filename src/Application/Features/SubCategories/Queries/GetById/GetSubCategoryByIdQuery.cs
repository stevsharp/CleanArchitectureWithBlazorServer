//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-21
//     Last Modified: 2025-03-21
//     Description: 
//       Defines a query to retrieve a subcategory by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same subcategory.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.SubCategories.DTOs;
using CleanArchitecture.Blazor.Application.Features.SubCategories.Caching;
using CleanArchitecture.Blazor.Application.Features.SubCategories.Mappers;
using CleanArchitecture.Blazor.Application.Features.SubCategories.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.SubCategories.Queries.GetById;

public class GetSubCategoryByIdQuery : ICacheableRequest<Result<SubCategoryDto>>
{
   public required int Id { get; set; }
   public string CacheKey => SubCategoryCacheKey.GetByIdCacheKey($"{Id}");
   public IEnumerable<string>? Tags => SubCategoryCacheKey.Tags;
}

public class GetSubCategoryByIdQueryHandler :
     IRequestHandler<GetSubCategoryByIdQuery, Result<SubCategoryDto>>
{
    private readonly IApplicationDbContext _context;

    public GetSubCategoryByIdQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<Result<SubCategoryDto>> Handle(GetSubCategoryByIdQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.SubCategories.ApplySpecification(new SubCategoryByIdSpecification(request.Id))
                                                .ProjectTo()
                                                .FirstAsync(cancellationToken);
        return await Result<SubCategoryDto>.SuccessAsync(data);
    }
}
