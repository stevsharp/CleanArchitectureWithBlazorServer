//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-21
//     Last Modified: 2025-03-21
//     Description: 
//       Defines a query to export subcategory data to an Excel file. This query 
//       applies advanced filtering options and generates an Excel file with 
//       the specified subcategory details.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.SubCategories.DTOs;
using CleanArchitecture.Blazor.Application.Features.SubCategories.Mappers;
using CleanArchitecture.Blazor.Application.Features.SubCategories.Caching;
using CleanArchitecture.Blazor.Application.Features.SubCategories.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.SubCategories.Queries.Export;

public class ExportSubCategoriesQuery : SubCategoryAdvancedFilter, ICacheableRequest<Result<byte[]>>
{
      public SubCategoryAdvancedSpecification Specification => new SubCategoryAdvancedSpecification(this);
      public IEnumerable<string>? Tags => SubCategoryCacheKey.Tags;
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}-{LocalTimezoneOffset.TotalHours}, Search:{Keyword}, {OrderBy}, {SortDirection}";
    }
    public string CacheKey => SubCategoryCacheKey.GetExportCacheKey($"{this}");
}
    
public class ExportSubCategoriesQueryHandler :
         IRequestHandler<ExportSubCategoriesQuery, Result<byte[]>>
{
        private readonly IApplicationDbContext _context;
        private readonly IExcelService _excelService;
        private readonly IStringLocalizer<ExportSubCategoriesQueryHandler> _localizer;
        private readonly SubCategoryDto _dto = new();
        public ExportSubCategoriesQueryHandler(
            IApplicationDbContext context,
            IExcelService excelService,
            IStringLocalizer<ExportSubCategoriesQueryHandler> localizer
            )
        {
            _context = context;
            _excelService = excelService;
            _localizer = localizer;
        }
        #nullable disable warnings
        public async Task<Result<byte[]>> Handle(ExportSubCategoriesQuery request, CancellationToken cancellationToken)
        {
            var data = await _context.SubCategories.ApplySpecification(request.Specification)
                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
                       .ProjectTo()
                       .AsNoTracking()
                       .ToListAsync(cancellationToken);
            var result = await _excelService.ExportAsync(data,
                new Dictionary<string, Func<SubCategoryDto, object?>>()
                {
                    // TODO: Define the fields that should be exported, for example:
                    {_localizer[_dto.GetMemberDescription(x=>x.Name)],item => item.Name}, 

                }
                , _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
}
