//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-23
// UpdateAssignmentCommand & handler: updates an existing Assignment with cache invalidation and raises AssignmentUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/assignment
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Assignments.DTOs;
using CleanArchitecture.Blazor.Application.Features.Assignments.Caching;
using CleanArchitecture.Blazor.Application.Features.Projects.DTOs;

namespace CleanArchitecture.Blazor.Application.Features.Assignments.Commands.Update;

public class UpdateAssignmentCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Project id")]
    public int ProjectId {get;set;} 
    [Description("Project")]
    public ProjectDto? Project {get;set;} 
    [Description("Employee id")]
    public int EmployeeId {get;set;} 
    [Description("Employee")]
    public EmployeeDto? Employee {get;set;} 
    [Description("Role")]
    public string? Role {get;set;} 
    [Description("Start date")]
    public DateTime? StartDate {get;set;} 
    [Description("End date")]
    public DateTime? EndDate {get;set;} 

      public string CacheKey => AssignmentCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => AssignmentCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateAssignmentCommand, Assignment>(MemberList.None);
            CreateMap<AssignmentDto,UpdateAssignmentCommand>(MemberList.None);
        }
    }

}

public class UpdateAssignmentCommandHandler : IRequestHandler<UpdateAssignmentCommand, Result<int>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public UpdateAssignmentCommandHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateAssignmentCommand request, CancellationToken cancellationToken)
    {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = await _context.Assignments.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"Assignment with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new AssignmentUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

