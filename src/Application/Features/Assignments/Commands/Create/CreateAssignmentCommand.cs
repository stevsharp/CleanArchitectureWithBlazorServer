//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-23
// Command and handler for creating a new Assignment.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/assignment
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Assignments.Caching;
using CleanArchitecture.Blazor.Application.Features.Employees.DTOs;

namespace CleanArchitecture.Blazor.Application.Features.Assignments.Commands.Create;

public class CreateAssignmentCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Project id")]
    public int ProjectId {get;set;} 
    [Description("Project")]
    public ProjectDto? Project {get;set;} 
    [Description("Employee id")]
    public int EmployeeId {get;set;} 
    [Description("Employee")]
    public EmployeeDto? Employee {get;set;} 
    [Description("Role")]
    public string? Role {get;set;} 
    [Description("Start date")]
    public DateTime? StartDate {get;set;} 
    [Description("End date")]
    public DateTime? EndDate {get;set;} 

      public string CacheKey => AssignmentCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => AssignmentCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateAssignmentCommand, Assignment>(MemberList.None);
        }
    }
}
    
    public class CreateAssignmentCommandHandler : IRequestHandler<CreateAssignmentCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        public CreateAssignmentCommandHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory)
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
        }
        public async Task<Result<int>> Handle(CreateAssignmentCommand request, CancellationToken cancellationToken)
        {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<Assignment>(request);
           // raise a create domain event
	       item.AddDomainEvent(new AssignmentCreatedEvent(item));
           _context.Assignments.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

