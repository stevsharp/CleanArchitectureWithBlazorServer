//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-23
//     Last Modified: 2025-09-23
//     Description: 
//       Defines a query to retrieve all assignments from the database. The result 
//       is cached to improve performance and reduce database load for repeated 
//       queries.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Assignments.DTOs;
using CleanArchitecture.Blazor.Application.Features.Assignments.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Assignments.Queries.GetAll;

public class GetAllAssignmentsQuery : ICacheableRequest<IEnumerable<AssignmentDto>>
{
   public string CacheKey => AssignmentCacheKey.GetAllCacheKey;
   public IEnumerable<string>? Tags => AssignmentCacheKey.Tags;
}

public class GetAllAssignmentsQueryHandler :
     IRequestHandler<GetAllAssignmentsQuery, IEnumerable<AssignmentDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public GetAllAssignmentsQueryHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _mapper = mapper;
        _dbContextFactory = dbContextFactory;
    }

    public async Task<IEnumerable<AssignmentDto>> Handle(GetAllAssignmentsQuery request, CancellationToken cancellationToken)
    {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await _context.Assignments.ProjectTo<AssignmentDto>(_mapper.ConfigurationProvider)
                                                .AsNoTracking()
                                                .ToListAsync(cancellationToken);
        return data;
    }
}


