//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// QuoteDto: transfers quote data between layers.
// Docs: https://docs.cleanarchitectureblazor.com/features/quote
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings


namespace CleanArchitecture.Blazor.Application.Features.Quotes.DTOs;

[Description("Quotes")]
public class QuoteDto
{
    [Description("Id")]
    public int Id { get; set; }
        [Description("Company id")]
    public int CompanyId {get;set;} 
    [Description("Company")]
    public CompanyDto? Company {get;set;} 
    [Description("Title")]
    public string? Title {get;set;} 
    [Description("Owner id")]
    public int OwnerId {get;set;} 
    [Description("Owner")]
    public EmployeeDto? Owner {get;set;} 
    [Description("Status")]
    public QuoteStatus? Status {get;set;} 
    [Description("Valid until")]
    public DateTime? ValidUntil {get;set;} 
    [Description("Currency")]
    public string? Currency {get;set;} 
    [Description("Total amount")]
    public decimal TotalAmount {get;set;} 
    [Description("Margin pct")]
    public decimal? MarginPct {get;set;} 
    [Description("Versions")]
    public List<QuoteVersionDto>? Versions {get;set;} 
    [Description("Attachments")]
    public List<QuoteAttachmentDto>? Attachments {get;set;} 
    [Description("Approvals")]
    public List<QuoteApprovalDto>? Approvals {get;set;} 


    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<Quote, QuoteDto>(MemberList.None);
            CreateMap<QuoteDto, Quote>(MemberList.None)
            .ForMember(dest => dest.Created, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedBy, opt => opt.Ignore())
            .ForMember(dest => dest.LastModified, opt => opt.Ignore())
            .ForMember(dest => dest.LastModifiedBy, opt => opt.Ignore())
            .ForMember(dest => dest.DomainEvents, opt => opt.Ignore());
        }
    }
}

