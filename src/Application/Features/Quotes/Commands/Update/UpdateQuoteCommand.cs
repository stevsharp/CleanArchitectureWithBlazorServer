//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdateQuoteCommand & handler: updates an existing Quote with cache invalidation and raises QuoteUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/quote
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Quotes.DTOs;
using CleanArchitecture.Blazor.Application.Features.Quotes.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Quotes.Commands.Update;

public class UpdateQuoteCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Company id")]
    public int CompanyId {get;set;} 
    [Description("Company")]
    public CompanyDto? Company {get;set;} 
    [Description("Title")]
    public string? Title {get;set;} 
    [Description("Owner id")]
    public int OwnerId {get;set;} 
    [Description("Owner")]
    public EmployeeDto? Owner {get;set;} 
    [Description("Status")]
    public QuoteStatus? Status {get;set;} 
    [Description("Valid until")]
    public DateTime? ValidUntil {get;set;} 
    [Description("Currency")]
    public string? Currency {get;set;} 
    [Description("Total amount")]
    public decimal TotalAmount {get;set;} 
    [Description("Margin pct")]
    public decimal? MarginPct {get;set;} 

      public string CacheKey => QuoteCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => QuoteCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateQuoteCommand, Quote>(MemberList.None);
            CreateMap<QuoteDto,UpdateQuoteCommand>(MemberList.None);
        }
    }

}

public class UpdateQuoteCommandHandler : IRequestHandler<UpdateQuoteCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    public UpdateQuoteCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _context = context;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateQuoteCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.Quotes.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"Quote with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new QuoteUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

