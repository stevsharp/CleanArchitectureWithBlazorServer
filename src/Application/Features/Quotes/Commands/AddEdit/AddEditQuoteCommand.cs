//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command for adding/editing a quote entity with validation, mapping,
// domain events, and cache invalidation.
// Documentation: https://docs.cleanarchitectureblazor.com/features/quote
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings


using CleanArchitecture.Blazor.Application.Features.Quotes.Caching;
using CleanArchitecture.Blazor.Application.Features.Quotes.DTOs;
namespace CleanArchitecture.Blazor.Application.Features.Quotes.Commands.AddEdit;

public class AddEditQuoteCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Company id")]
    public int CompanyId {get;set;} 
    [Description("Company")]
    public CompanyDto? Company {get;set;} 
    [Description("Title")]
    public string? Title {get;set;} 
    [Description("Owner id")]
    public int OwnerId {get;set;} 
    [Description("Owner")]
    public EmployeeDto? Owner {get;set;} 
    [Description("Status")]
    public QuoteStatus? Status {get;set;} 
    [Description("Valid until")]
    public DateTime? ValidUntil {get;set;} 
    [Description("Currency")]
    public string? Currency {get;set;} 
    [Description("Total amount")]
    public decimal TotalAmount {get;set;} 
    [Description("Margin pct")]
    public decimal? MarginPct {get;set;} 


      public string CacheKey => QuoteCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => QuoteCacheKey.Tags;
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<QuoteDto, AddEditQuoteCommand>(MemberList.None);
            CreateMap<AddEditQuoteCommand, Quote>(MemberList.None);
        }
    }
}

public class AddEditQuoteCommandHandler : IRequestHandler<AddEditQuoteCommand, Result<int>>
{
    private readonly IMapper _mapper;
    private readonly IApplicationDbContext _context;
    public AddEditQuoteCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _mapper = mapper;
        _context = context;
    }
    public async Task<Result<int>> Handle(AddEditQuoteCommand request, CancellationToken cancellationToken)
    {
        if (request.Id > 0)
        {
            var item = await _context.Quotes.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"Quote with id: [{request.Id}] not found.");
            }
            item = _mapper.Map(request, item);
			// raise a update domain event
			item.AddDomainEvent(new QuoteUpdatedEvent(item));
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
            var item = _mapper.Map<Quote>(request);
            // raise a create domain event
			item.AddDomainEvent(new QuoteCreatedEvent(item));
            _context.Quotes.Add(item);
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
       
    }
}

