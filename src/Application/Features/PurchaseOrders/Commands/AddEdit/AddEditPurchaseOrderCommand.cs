//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command for adding/editing a purchaseorder entity with validation, mapping,
// domain events, and cache invalidation.
// Documentation: https://docs.cleanarchitectureblazor.com/features/purchaseorder
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings


using CleanArchitecture.Blazor.Application.Features.PurchaseOrders.Caching;
using CleanArchitecture.Blazor.Application.Features.PurchaseOrders.DTOs;
namespace CleanArchitecture.Blazor.Application.Features.PurchaseOrders.Commands.AddEdit;

public class AddEditPurchaseOrderCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Vendor id")]
    public int VendorId {get;set;} 
    [Description("Vendor")]
    public VendorDto? Vendor {get;set;} 
    [Description("Project id")]
    public int ProjectId {get;set;} 
    [Description("Project")]
    public ProjectDto? Project {get;set;} 
    [Description("Amount")]
    public decimal Amount {get;set;} 
    [Description("Date")]
    public DateTime? Date {get;set;} 
    [Description("Status")]
    public PurchaseOrderStatus? Status {get;set;} 
    [Description("External number")]
    public string? ExternalNumber {get;set;} 
    [Description("Notes")]
    public string? Notes {get;set;} 


      public string CacheKey => PurchaseOrderCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => PurchaseOrderCacheKey.Tags;
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<PurchaseOrderDto, AddEditPurchaseOrderCommand>(MemberList.None);
            CreateMap<AddEditPurchaseOrderCommand, PurchaseOrder>(MemberList.None);
        }
    }
}

public class AddEditPurchaseOrderCommandHandler : IRequestHandler<AddEditPurchaseOrderCommand, Result<int>>
{
    private readonly IMapper _mapper;
    private readonly IApplicationDbContextFactory _dbContextFactory;;
    public AddEditPurchaseOrderCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _mapper = mapper;
        _context = context;
    }
    public async Task<Result<int>> Handle(AddEditPurchaseOrderCommand request, CancellationToken cancellationToken)
    {
        if (request.Id > 0)
        {
            var item = await _context.PurchaseOrders.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"PurchaseOrder with id: [{request.Id}] not found.");
            }
            item = _mapper.Map(request, item);
			// raise a update domain event
			item.AddDomainEvent(new PurchaseOrderUpdatedEvent(item));
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
            var item = _mapper.Map<PurchaseOrder>(request);
            // raise a create domain event
			item.AddDomainEvent(new PurchaseOrderCreatedEvent(item));
            _context.PurchaseOrders.Add(item);
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
       
    }
}

