//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdatePurchaseOrderCommand & handler: updates an existing PurchaseOrder with cache invalidation and raises PurchaseOrderUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/purchaseorder
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.PurchaseOrders.DTOs;
using CleanArchitecture.Blazor.Application.Features.PurchaseOrders.Caching;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseOrders.Commands.Update;

public class UpdatePurchaseOrderCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Vendor id")]
    public int VendorId {get;set;} 
    [Description("Vendor")]
    public VendorDto? Vendor {get;set;} 
    [Description("Project id")]
    public int ProjectId {get;set;} 
    [Description("Project")]
    public ProjectDto? Project {get;set;} 
    [Description("Amount")]
    public decimal Amount {get;set;} 
    [Description("Date")]
    public DateTime? Date {get;set;} 
    [Description("Status")]
    public PurchaseOrderStatus? Status {get;set;} 
    [Description("External number")]
    public string? ExternalNumber {get;set;} 
    [Description("Notes")]
    public string? Notes {get;set;} 

      public string CacheKey => PurchaseOrderCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => PurchaseOrderCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdatePurchaseOrderCommand, PurchaseOrder>(MemberList.None);
            CreateMap<PurchaseOrderDto,UpdatePurchaseOrderCommand>(MemberList.None);
        }
    }

}

public class UpdatePurchaseOrderCommandHandler : IRequestHandler<UpdatePurchaseOrderCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    public UpdatePurchaseOrderCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _context = context;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdatePurchaseOrderCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.PurchaseOrders.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"PurchaseOrder with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new PurchaseOrderUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

