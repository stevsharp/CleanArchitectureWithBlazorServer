//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-24
//     Last Modified: 2025-09-24
//     Description: 
//       Defines a query to retrieve all purchaseorders from the database. The result 
//       is cached to improve performance and reduce database load for repeated 
//       queries.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.PurchaseOrders.DTOs;
using CleanArchitecture.Blazor.Application.Features.PurchaseOrders.Caching;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseOrders.Queries.GetAll;

public class GetAllPurchaseOrdersQuery : ICacheableRequest<IEnumerable<PurchaseOrderDto>>
{
   public string CacheKey => PurchaseOrderCacheKey.GetAllCacheKey;
   public IEnumerable<string>? Tags => PurchaseOrderCacheKey.Tags;
}

public class GetAllPurchaseOrdersQueryHandler :
     IRequestHandler<GetAllPurchaseOrdersQuery, IEnumerable<PurchaseOrderDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public GetAllPurchaseOrdersQueryHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _mapper = mapper;
        _dbContextFactory = dbContextFactory;
    }

    public async Task<IEnumerable<PurchaseOrderDto>> Handle(GetAllPurchaseOrdersQuery request, CancellationToken cancellationToken)
    {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await _context.PurchaseOrders.ProjectTo<PurchaseOrderDto>(_mapper.ConfigurationProvider)
                                                .AsNoTracking()
                                                .ToListAsync(cancellationToken);
        return data;
    }
}


