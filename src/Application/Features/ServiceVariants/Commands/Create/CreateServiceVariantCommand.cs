//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command and handler for creating a new ServiceVariant.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/servicevariant
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.ServiceVariants.Caching;

namespace CleanArchitecture.Blazor.Application.Features.ServiceVariants.Commands.Create;

public class CreateServiceVariantCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Service id")]
    public int ServiceId {get;set;} 
    [Description("Service")]
    public ServiceDto? Service {get;set;} 
    [Description("Name")]
    public string Name {get;set;} 
    [Description("Unit")]
    public string? Unit {get;set;} 
    [Description("Complexity level")]
    public int? ComplexityLevel {get;set;} 
    [Description("Base price")]
    public decimal? BasePrice {get;set;} 

      public string CacheKey => ServiceVariantCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => ServiceVariantCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateServiceVariantCommand, ServiceVariant>(MemberList.None);
        }
    }
}
    
    public class CreateServiceVariantCommandHandler : IRequestHandler<CreateServiceVariantCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContext _context;
        public CreateServiceVariantCommandHandler(
            IMapper mapper,
            IApplicationDbContext context)
        {
            _mapper = mapper;
            _context = context;
        }
        public async Task<Result<int>> Handle(CreateServiceVariantCommand request, CancellationToken cancellationToken)
        {
           var item = _mapper.Map<ServiceVariant>(request);
           // raise a create domain event
	       item.AddDomainEvent(new ServiceVariantCreatedEvent(item));
           _context.ServiceVariants.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

