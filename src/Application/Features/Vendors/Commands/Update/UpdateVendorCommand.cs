//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdateVendorCommand & handler: updates an existing Vendor with cache invalidation and raises VendorUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/vendor
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Vendors.DTOs;
using CleanArchitecture.Blazor.Application.Features.Vendors.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Vendors.Commands.Update;

public class UpdateVendorCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Company id")]
    public int CompanyId {get;set;} 
    [Description("Company")]
    public CompanyDto? Company {get;set;} 
    [Description("Service category id")]
    public int? ServiceCategoryId {get;set;} 
    [Description("Service category")]
    public ServiceCategoryDto? ServiceCategory {get;set;} 
    [Description("Terms")]
    public string? Terms {get;set;} 

      public string CacheKey => VendorCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => VendorCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateVendorCommand, Vendor>(MemberList.None);
            CreateMap<VendorDto,UpdateVendorCommand>(MemberList.None);
        }
    }

}

public class UpdateVendorCommandHandler : IRequestHandler<UpdateVendorCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    public UpdateVendorCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _context = context;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateVendorCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.Vendors.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"Vendor with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new VendorUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

