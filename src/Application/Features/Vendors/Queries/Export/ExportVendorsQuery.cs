//---------------------------   ---------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-24
//     Last Modified: 2025-09-24
//     Description: 
//       Defines a query to export vendor data to an Excel file. This query 
//       applies advanced filtering options and generates an Excel file with 
//       the specified vendor details.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Vendors.DTOs;
using CleanArchitecture.Blazor.Application.Features.Vendors.Caching;
using CleanArchitecture.Blazor.Application.Features.Vendors.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Vendors.Queries.Export;

public class ExportVendorsQuery : VendorAdvancedFilter, ICacheableRequest<Result<byte[]>>
{
      public VendorAdvancedSpecification Specification => new VendorAdvancedSpecification(this);
      public IEnumerable<string>? Tags => VendorCacheKey.Tags;
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}";
    }
    public string CacheKey => VendorCacheKey.GetExportCacheKey($"{this}");
}
    
public class ExportVendorsQueryHandler :
         IRequestHandler<ExportVendorsQuery, Result<byte[]>>
{
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        private readonly IExcelService _excelService;
        private readonly IStringLocalizer<ExportVendorsQueryHandler> _localizer;
        private readonly VendorDto _dto = new();
        public ExportVendorsQueryHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory,
            IExcelService excelService,
            IStringLocalizer<ExportVendorsQueryHandler> localizer
            )
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
            _excelService = excelService;
            _localizer = localizer;
        }
        #nullable disable warnings
        public async Task<Result<byte[]>> Handle(ExportVendorsQuery request, CancellationToken cancellationToken)
        {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await _context.Vendors.ApplySpecification(request.Specification)
                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
                       .ProjectTo<VendorDto>(_mapper.ConfigurationProvider)
                       .AsNoTracking()
                       .ToListAsync(cancellationToken);
            var result = await _excelService.ExportAsync(data,
                new Dictionary<string, Func<VendorDto, object?>>()
                {
                    // TODO: Define the fields that should be exported, for example:
                                     {_localizer[_dto.GetMemberDescription(x=>x.CompanyId)],item => item.CompanyId}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.ServiceCategoryId)],item => item.ServiceCategoryId}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Terms)],item => item.Terms}, 

                }
                , _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
}
