//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command and handler for deleting Project entities.
// Implements cache invalidation and triggers domain events.
// Docs: https://docs.cleanarchitectureblazor.com/features/project
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Projects.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Projects.Commands.Delete;

public class DeleteProjectCommand:  ICacheInvalidatorRequest<Result>
{
  public int[] Id {  get; }
  public string CacheKey => ProjectCacheKey.GetAllCacheKey;
  public IEnumerable<string>? Tags => ProjectCacheKey.Tags;
  public DeleteProjectCommand(int[] id)
  {
    Id = id;
  }
}

public class DeleteProjectCommandHandler : 
             IRequestHandler<DeleteProjectCommand, Result>

{
    private readonly IApplicationDbContext _context;
    public DeleteProjectCommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result> Handle(DeleteProjectCommand request, CancellationToken cancellationToken)
    {
        var items = await _context.Projects.Where(x=>request.Id.Contains(x.Id)).ToListAsync(cancellationToken);
        foreach (var item in items)
        {
		    // raise a delete domain event
			item.AddDomainEvent(new ProjectDeletedEvent(item));
            _context.Projects.Remove(item);
        }
        await _context.SaveChangesAsync(cancellationToken);
        return await Result.SuccessAsync();
    }

}

