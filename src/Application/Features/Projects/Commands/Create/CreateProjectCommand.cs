//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command and handler for creating a new Project.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/project
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Projects.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Projects.Commands.Create;

public class CreateProjectCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Quote id")]
    public int? QuoteId {get;set;} 
    [Description("Quote")]
    public QuoteDto? Quote {get;set;} 
    [Description("Name")]
    public string Name {get;set;} 
    [Description("Start date")]
    public DateTime? StartDate {get;set;} 
    [Description("End date")]
    public DateTime? EndDate {get;set;} 
    [Description("Status")]
    public ProjectStatus? Status {get;set;} 
    [Description("Budget")]
    public decimal? Budget {get;set;} 
    [Description("Owner id")]
    public int OwnerId {get;set;} 
    [Description("Owner")]
    public EmployeeDto? Owner {get;set;} 

      public string CacheKey => ProjectCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => ProjectCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateProjectCommand, Project>(MemberList.None);
        }
    }
}
    
    public class CreateProjectCommandHandler : IRequestHandler<CreateProjectCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        public CreateProjectCommandHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory)
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
        }
        public async Task<Result<int>> Handle(CreateProjectCommand request, CancellationToken cancellationToken)
        {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<Project>(request);
           // raise a create domain event
	       item.AddDomainEvent(new ProjectCreatedEvent(item));
           _context.Projects.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

