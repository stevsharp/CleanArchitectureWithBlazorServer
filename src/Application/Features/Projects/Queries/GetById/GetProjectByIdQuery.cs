//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-24
//     Last Modified: 2025-09-24
//     Description: 
//       Defines a query to retrieve a project by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same project.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Projects.DTOs;
using CleanArchitecture.Blazor.Application.Features.Projects.Caching;
using CleanArchitecture.Blazor.Application.Features.Projects.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Projects.Queries.GetById;

public class GetProjectByIdQuery : ICacheableRequest<Result<ProjectDto>>
{
   public required int Id { get; set; }
   public string CacheKey => ProjectCacheKey.GetByIdCacheKey($"{Id}");
   public IEnumerable<string>? Tags => ProjectCacheKey.Tags;
}

public class GetProjectByIdQueryHandler :
     IRequestHandler<GetProjectByIdQuery, Result<ProjectDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public GetProjectByIdQueryHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _mapper = mapper;
        _dbContextFactory = dbContextFactory;
    }

    public async Task<Result<ProjectDto>> Handle(GetProjectByIdQuery request, CancellationToken cancellationToken)
    {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await _context.Projects.ApplySpecification(new ProjectByIdSpecification(request.Id))
                                                .ProjectTo<ProjectDto>(_mapper.ConfigurationProvider)
                                                .FirstAsync(cancellationToken) ?? throw new NotFoundException($"Project with id: [{request.Id}] not found.");
        return await Result<ProjectDto>.SuccessAsync(data);
    }
}
