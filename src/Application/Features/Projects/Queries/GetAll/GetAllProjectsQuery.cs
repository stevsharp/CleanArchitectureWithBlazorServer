//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-24
//     Last Modified: 2025-09-24
//     Description: 
//       Defines a query to retrieve all projects from the database. The result 
//       is cached to improve performance and reduce database load for repeated 
//       queries.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Projects.DTOs;
using CleanArchitecture.Blazor.Application.Features.Projects.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Projects.Queries.GetAll;

public class GetAllProjectsQuery : ICacheableRequest<IEnumerable<ProjectDto>>
{
   public string CacheKey => ProjectCacheKey.GetAllCacheKey;
   public IEnumerable<string>? Tags => ProjectCacheKey.Tags;
}

public class GetAllProjectsQueryHandler :
     IRequestHandler<GetAllProjectsQuery, IEnumerable<ProjectDto>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    public GetAllProjectsQueryHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _mapper = mapper;
        _context = context;
    }

    public async Task<IEnumerable<ProjectDto>> Handle(GetAllProjectsQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.Projects.ProjectTo<ProjectDto>(_mapper.ConfigurationProvider)
                                                .AsNoTracking()
                                                .ToListAsync(cancellationToken);
        return data;
    }
}


