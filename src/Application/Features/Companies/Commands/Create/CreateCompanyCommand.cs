//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-23
// Command and handler for creating a new Company.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/company
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Companies.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Companies.Commands.Create;

public class CreateCompanyCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Vat number")]
    public string? VatNumber {get;set;} 
    [Description("Address")]
    public string? Address {get;set;} 
    [Description("Country")]
    public string? Country {get;set;} 
    [Description("Website")]
    public string? Website {get;set;} 
    [Description("Industry")]
    public string? Industry {get;set;} 

      public string CacheKey => CompanyCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => CompanyCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateCompanyCommand, Company>(MemberList.None);
        }
    }
}
    
    public class CreateCompanyCommandHandler : IRequestHandler<CreateCompanyCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        public CreateCompanyCommandHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory)
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
    }
        public async Task<Result<int>> Handle(CreateCompanyCommand request, CancellationToken cancellationToken)
        {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<Company>(request);
           // raise a create domain event
	       item.AddDomainEvent(new CompanyCreatedEvent(item));
           _context.Companies.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

