//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-23
// UpdateCompanyCommand & handler: updates an existing Company with cache invalidation and raises CompanyUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/company
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Companies.DTOs;
using CleanArchitecture.Blazor.Application.Features.Companies.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Companies.Commands.Update;

public class UpdateCompanyCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Vat number")]
    public string? VatNumber {get;set;} 
    [Description("Address")]
    public string? Address {get;set;} 
    [Description("Country")]
    public string? Country {get;set;} 
    [Description("Website")]
    public string? Website {get;set;} 
    [Description("Industry")]
    public string? Industry {get;set;} 

      public string CacheKey => CompanyCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => CompanyCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateCompanyCommand, Company>(MemberList.None);
            CreateMap<CompanyDto,UpdateCompanyCommand>(MemberList.None);
        }
    }

}

public class UpdateCompanyCommandHandler : IRequestHandler<UpdateCompanyCommand, Result<int>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public UpdateCompanyCommandHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _dbContextFactory = dbContextFactory;   
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateCompanyCommand request, CancellationToken cancellationToken)
    {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = await _context.Companies.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"Company with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new CompanyUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

