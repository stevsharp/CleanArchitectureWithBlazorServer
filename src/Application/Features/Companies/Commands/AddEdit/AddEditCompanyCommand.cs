//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-23
// Command for adding/editing a company entity with validation, mapping,
// domain events, and cache invalidation.
// Documentation: https://docs.cleanarchitectureblazor.com/features/company
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings


using CleanArchitecture.Blazor.Application.Features.Companies.Caching;
using CleanArchitecture.Blazor.Application.Features.Companies.DTOs;
namespace CleanArchitecture.Blazor.Application.Features.Companies.Commands.AddEdit;

public class AddEditCompanyCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Vat number")]
    public string? VatNumber {get;set;} 
    [Description("Address")]
    public string? Address {get;set;} 
    [Description("Country")]
    public string? Country {get;set;} 
    [Description("Website")]
    public string? Website {get;set;} 
    [Description("Industry")]
    public string? Industry {get;set;} 


      public string CacheKey => CompanyCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => CompanyCacheKey.Tags;
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CompanyDto, AddEditCompanyCommand>(MemberList.None);
            CreateMap<AddEditCompanyCommand, Company>(MemberList.None);
        }
    }
}

public class AddEditCompanyCommandHandler : IRequestHandler<AddEditCompanyCommand, Result<int>>
{
    private readonly IMapper _mapper;
    private readonly IApplicationDbContext _context;
    public AddEditCompanyCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _mapper = mapper;
        _context = context;
    }
    public async Task<Result<int>> Handle(AddEditCompanyCommand request, CancellationToken cancellationToken)
    {
        if (request.Id > 0)
        {
            var item = await _context.Companies.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"Company with id: [{request.Id}] not found.");
            }
            item = _mapper.Map(request, item);
			// raise a update domain event
			item.AddDomainEvent(new CompanyUpdatedEvent(item));
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
            var item = _mapper.Map<Company>(request);
            // raise a create domain event
			item.AddDomainEvent(new CompanyCreatedEvent(item));
            _context.Companies.Add(item);
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
       
    }
}

