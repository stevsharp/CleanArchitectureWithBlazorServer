//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-23
//     Last Modified: 2025-09-23
//     Description: 
//       Defines a query to export company data to an Excel file. This query 
//       applies advanced filtering options and generates an Excel file with 
//       the specified company details.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Companies.DTOs;
using CleanArchitecture.Blazor.Application.Features.Companies.Caching;
using CleanArchitecture.Blazor.Application.Features.Companies.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Companies.Queries.Export;

public class ExportCompaniesQuery : CompanyAdvancedFilter, ICacheableRequest<Result<byte[]>>
{
      public CompanyAdvancedSpecification Specification => new CompanyAdvancedSpecification(this);
      public IEnumerable<string>? Tags => CompanyCacheKey.Tags;
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}";
    }
    public string CacheKey => CompanyCacheKey.GetExportCacheKey($"{this}");
}
    
public class ExportCompaniesQueryHandler :
         IRequestHandler<ExportCompaniesQuery, Result<byte[]>>
{
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        private readonly IExcelService _excelService;
        private readonly IStringLocalizer<ExportCompaniesQueryHandler> _localizer;
        private readonly CompanyDto _dto = new();
        public ExportCompaniesQueryHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory,
            IExcelService excelService,
            IStringLocalizer<ExportCompaniesQueryHandler> localizer
            )
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
            _excelService = excelService;
            _localizer = localizer;
        }
        #nullable disable warnings
        public async Task<Result<byte[]>> Handle(ExportCompaniesQuery request, CancellationToken cancellationToken)
        {
            await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
            var data = await _context.Companies.ApplySpecification(request.Specification)
                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
                       .ProjectTo<CompanyDto>(_mapper.ConfigurationProvider)
                       .AsNoTracking()
                       .ToListAsync(cancellationToken);
            var result = await _excelService.ExportAsync(data,
                new Dictionary<string, Func<CompanyDto, object?>>()
                {
                    // TODO: Define the fields that should be exported, for example:
                                     {_localizer[_dto.GetMemberDescription(x=>x.Name)],item => item.Name}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.VatNumber)],item => item.VatNumber}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Address)],item => item.Address}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Country)],item => item.Country}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Website)],item => item.Website}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Industry)],item => item.Industry}, 

                }
                , _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
}
