//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-24
//     Last Modified: 2025-09-24
//     Description: 
//       Defines a query to retrieve a equipmentitem by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same equipmentitem.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.EquipmentItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.EquipmentItems.Caching;
using CleanArchitecture.Blazor.Application.Features.EquipmentItems.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.EquipmentItems.Queries.GetById;

public class GetEquipmentItemByIdQuery : ICacheableRequest<Result<EquipmentItemDto>>
{
   public required int Id { get; set; }
   public string CacheKey => EquipmentItemCacheKey.GetByIdCacheKey($"{Id}");
   public IEnumerable<string>? Tags => EquipmentItemCacheKey.Tags;
}

public class GetEquipmentItemByIdQueryHandler :
     IRequestHandler<GetEquipmentItemByIdQuery, Result<EquipmentItemDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public GetEquipmentItemByIdQueryHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _mapper = mapper;
        _dbContextFactory = dbContextFactory;
    }

    public async Task<Result<EquipmentItemDto>> Handle(GetEquipmentItemByIdQuery request, CancellationToken cancellationToken)
    {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await _context.EquipmentItems.ApplySpecification(new EquipmentItemByIdSpecification(request.Id))
                                                .ProjectTo<EquipmentItemDto>(_mapper.ConfigurationProvider)
                                                .FirstAsync(cancellationToken) ?? throw new NotFoundException($"EquipmentItem with id: [{request.Id}] not found.");
        return await Result<EquipmentItemDto>.SuccessAsync(data);
    }
}
