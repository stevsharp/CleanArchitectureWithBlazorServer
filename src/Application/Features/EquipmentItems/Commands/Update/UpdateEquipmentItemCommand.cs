//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// UpdateEquipmentItemCommand & handler: updates an existing EquipmentItem with cache invalidation and raises EquipmentItemUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/equipmentitem
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.EquipmentItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.EquipmentItems.Caching;

namespace CleanArchitecture.Blazor.Application.Features.EquipmentItems.Commands.Update;

public class UpdateEquipmentItemCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Category")]
    public string? Category {get;set;} 
    [Description("Daily rate")]
    public decimal? DailyRate {get;set;} 
    [Description("Purchase cost")]
    public decimal? PurchaseCost {get;set;} 
    [Description("Vendor id")]
    public int? VendorId {get;set;} 
    [Description("Vendor")]
    public VendorDto? Vendor {get;set;} 

      public string CacheKey => EquipmentItemCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => EquipmentItemCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateEquipmentItemCommand, EquipmentItem>(MemberList.None);
            CreateMap<EquipmentItemDto,UpdateEquipmentItemCommand>(MemberList.None);
        }
    }

}

public class UpdateEquipmentItemCommandHandler : IRequestHandler<UpdateEquipmentItemCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    public UpdateEquipmentItemCommandHandler(
        IMapper mapper,
        IApplicationDbContext context)
    {
        _context = context;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateEquipmentItemCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.EquipmentItems.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"EquipmentItem with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new EquipmentItemUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

