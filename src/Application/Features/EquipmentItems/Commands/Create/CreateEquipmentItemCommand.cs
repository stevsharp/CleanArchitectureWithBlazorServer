//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-24
// Command and handler for creating a new EquipmentItem.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/equipmentitem
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.EquipmentItems.Caching;

namespace CleanArchitecture.Blazor.Application.Features.EquipmentItems.Commands.Create;

public class CreateEquipmentItemCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Category")]
    public string? Category {get;set;} 
    [Description("Daily rate")]
    public decimal? DailyRate {get;set;} 
    [Description("Purchase cost")]
    public decimal? PurchaseCost {get;set;} 
    [Description("Vendor id")]
    public int? VendorId {get;set;} 
    [Description("Vendor")]
    public VendorDto? Vendor {get;set;} 

      public string CacheKey => EquipmentItemCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => EquipmentItemCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateEquipmentItemCommand, EquipmentItem>(MemberList.None);
        }
    }
}
    
    public class CreateEquipmentItemCommandHandler : IRequestHandler<CreateEquipmentItemCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContext _context;
        public CreateEquipmentItemCommandHandler(
            IMapper mapper,
            IApplicationDbContext context)
        {
            _mapper = mapper;
            _context = context;
        }
        public async Task<Result<int>> Handle(CreateEquipmentItemCommand request, CancellationToken cancellationToken)
        {
           var item = _mapper.Map<EquipmentItem>(request);
           // raise a create domain event
	       item.AddDomainEvent(new EquipmentItemCreatedEvent(item));
           _context.EquipmentItems.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

