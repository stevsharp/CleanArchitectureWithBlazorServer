//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-23
// Command and handler for creating a new Venue.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/venue
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Venues.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Venues.Commands.Create;

public class CreateVenueCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Location")]
    public string? Location {get;set;} 
    [Description("Capacity")]
    public int? Capacity {get;set;} 
    [Description("Venue fee")]
    public decimal? VenueFee {get;set;} 

      public string CacheKey => VenueCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => VenueCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateVenueCommand, Venue>(MemberList.None);
        }
    }
}
    
    public class CreateVenueCommandHandler : IRequestHandler<CreateVenueCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        public CreateVenueCommandHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory)
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
        }
        public async Task<Result<int>> Handle(CreateVenueCommand request, CancellationToken cancellationToken)
        {
        await using var _context = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<Venue>(request);
           // raise a create domain event
	       item.AddDomainEvent(new VenueCreatedEvent(item));
           _context.Venues.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

