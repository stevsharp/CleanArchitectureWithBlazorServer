//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-27
//     Last Modified: 2025-03-27
//     Description: 
//       Defines a query to retrieve a purchaseinvoice by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same purchaseinvoice.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.DTOs;
using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Caching;
using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Mappers;
using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Queries.GetById;

public class GetPurchaseInvoiceByIdQuery : ICacheableRequest<Result<PurchaseInvoiceDto>>
{
   public required int Id { get; set; }
   public string CacheKey => PurchaseInvoiceCacheKey.GetByIdCacheKey($"{Id}");
   public IEnumerable<string>? Tags => PurchaseInvoiceCacheKey.Tags;
}

public class GetPurchaseInvoiceByIdQueryHandler :
     IRequestHandler<GetPurchaseInvoiceByIdQuery, Result<PurchaseInvoiceDto>>
{
    private readonly IApplicationDbContext _context;

    public GetPurchaseInvoiceByIdQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<Result<PurchaseInvoiceDto>> Handle(GetPurchaseInvoiceByIdQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.PurchaseInvoices.ApplySpecification(new PurchaseInvoiceByIdSpecification(request.Id))
                                                .ProjectToDto()
                                                .FirstAsync(cancellationToken);
        return await Result<PurchaseInvoiceDto>.SuccessAsync(data);
    }
}
