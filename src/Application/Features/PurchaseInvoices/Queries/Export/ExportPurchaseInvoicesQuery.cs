////------------------------------------------------------------------------------
//// <auto-generated>
////     This file is part of the CleanArchitecture.Blazor project.
////     Licensed to the .NET Foundation under the MIT license.
////     See the LICENSE file in the project root for more information.
////
////     Author: neozhu
////     Created Date: 2025-03-27
////     Last Modified: 2025-03-27
////     Description: 
////       Defines a query to export purchaseinvoice data to an Excel file. This query 
////       applies advanced filtering options and generates an Excel file with 
////       the specified purchaseinvoice details.
//// </auto-generated>
////------------------------------------------------------------------------------

//using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.DTOs;
//using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Mappers;
//using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Caching;
//using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Specifications;

//namespace CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Queries.Export;

//public class ExportPurchaseInvoicesQuery : PurchaseInvoiceAdvancedFilter, ICacheableRequest<Result<byte[]>>
//{
//      public PurchaseInvoiceAdvancedSpecification Specification => new PurchaseInvoiceAdvancedSpecification(this);
//      public IEnumerable<string>? Tags => PurchaseInvoiceCacheKey.Tags;
//    public override string ToString()
//    {
//        return $"Listview:{ListView}:{CurrentUser?.UserId}-{LocalTimezoneOffset.TotalHours}, Search:{Keyword}, {OrderBy}, {SortDirection}";
//    }
//    public string CacheKey => PurchaseInvoiceCacheKey.GetExportCacheKey($"{this}");
//}
    
//public class ExportPurchaseInvoicesQueryHandler :
//         IRequestHandler<ExportPurchaseInvoicesQuery, Result<byte[]>>
//{
//        private readonly IApplicationDbContext _context;
//        private readonly IExcelService _excelService;
//        private readonly IStringLocalizer<ExportPurchaseInvoicesQueryHandler> _localizer;
//        private readonly PurchaseInvoiceDto _dto = new();
//        public ExportPurchaseInvoicesQueryHandler(
//            IApplicationDbContext context,
//            IExcelService excelService,
//            IStringLocalizer<ExportPurchaseInvoicesQueryHandler> localizer
//            )
//        {
//            _context = context;
//            _excelService = excelService;
//            _localizer = localizer;
//        }
//        #nullable disable warnings
//        public async Task<Result<byte[]>> Handle(ExportPurchaseInvoicesQuery request, CancellationToken cancellationToken)
//        {
//            var data = await _context.PurchaseInvoices.ApplySpecification(request.Specification)
//                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
//                       .ProjectTo()
//                       .AsNoTracking()
//                       .ToListAsync(cancellationToken);
//            var result = await _excelService.ExportAsync(data,
//                new Dictionary<string, Func<PurchaseInvoiceDto, object?>>()
//                {
//                    // TODO: Define the fields that should be exported, for example:
//                    {_localizer[_dto.GetMemberDescription(x=>x.SupplierId)],item => item.SupplierId}, 
//{_localizer[_dto.GetMemberDescription(x=>x.InvoiceNumber)],item => item.InvoiceNumber}, 
//{_localizer[_dto.GetMemberDescription(x=>x.InvoiceDate)],item => item.InvoiceDate}, 
//{_localizer[_dto.GetMemberDescription(x=>x.InvoiceType)],item => item.InvoiceType}, 
//{_localizer[_dto.GetMemberDescription(x=>x.TotalAmount)],item => item.TotalAmount}, 
//{_localizer[_dto.GetMemberDescription(x=>x.VATAmount)],item => item.VATAmount}, 
//{_localizer[_dto.GetMemberDescription(x=>x.PaymentStatus)],item => item.PaymentStatus}, 
//{_localizer[_dto.GetMemberDescription(x=>x.PaymentMethod)],item => item.PaymentMethod}, 
//{_localizer[_dto.GetMemberDescription(x=>x.IBAN)],item => item.IBAN}, 
//{_localizer[_dto.GetMemberDescription(x=>x.SWIFT)],item => item.SWIFT}, 
//{_localizer[_dto.GetMemberDescription(x=>x.Notes)],item => item.Notes}, 

//                }
//                , _localizer[_dto.GetClassDescription()]);
//            return await Result<byte[]>.SuccessAsync(result);
//        }
//}
