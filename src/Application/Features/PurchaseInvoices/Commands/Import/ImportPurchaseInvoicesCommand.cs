////------------------------------------------------------------------------------
//// <auto-generated>
////     This file is part of the CleanArchitecture.Blazor project.
////     Licensed to the .NET Foundation under one or more agreements.
////     The .NET Foundation licenses this file to you under the MIT license.
////     See the LICENSE file in the project root for more information.
////
////     Author: neozhu
////     Created Date: 2025-03-27
////     Last Modified: 2025-03-27
////     Description: 
////       This file defines the command, handler, and associated logic for importing 
////       purchaseinvoices from an Excel file into the CleanArchitecture.Blazor application. 
////       The import process supports validating data and ensuring no duplicates are 
////       inserted. Additionally, a command for creating a purchaseinvoice template file is provided 
////       to facilitate bulk data entry for end users.
////     
////     Documentation:
////       https://docs.cleanarchitectureblazor.com/features/purchaseinvoice
//// </auto-generated>
////------------------------------------------------------------------------------

//// Usage:
//// - Use `ImportPurchaseInvoicesCommand` to import purchaseinvoices from an Excel file, ensuring proper validation
////   and avoiding duplicates.
//// - Use `CreatePurchaseInvoicesTemplateCommand` to generate an Excel template for entering purchaseinvoice data 
////   that can be later imported using the import command.

//using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.DTOs;
//using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Caching;
//using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Mappers;

//namespace CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Commands.Import;

//    public class ImportPurchaseInvoicesCommand: ICacheInvalidatorRequest<Result<int>>
//    {
//        public string FileName { get; set; }
//        public byte[] Data { get; set; }
//        public string CacheKey => PurchaseInvoiceCacheKey.GetAllCacheKey;
//        public IEnumerable<string>? Tags => PurchaseInvoiceCacheKey.Tags;
//        public ImportPurchaseInvoicesCommand(string fileName,byte[] data)
//        {
//           FileName = fileName;
//           Data = data;
//        }
//    }
//    public record class CreatePurchaseInvoicesTemplateCommand : IRequest<Result<byte[]>>
//    {
 
//    }

//    public class ImportPurchaseInvoicesCommandHandler : 
//                 IRequestHandler<CreatePurchaseInvoicesTemplateCommand, Result<byte[]>>,
//                 IRequestHandler<ImportPurchaseInvoicesCommand, Result<int>>
//    {
//        private readonly IApplicationDbContext _context;
//        private readonly IStringLocalizer<ImportPurchaseInvoicesCommandHandler> _localizer;
//        private readonly IExcelService _excelService;
//        private readonly PurchaseInvoiceDto _dto = new();

//        public ImportPurchaseInvoicesCommandHandler(
//            IApplicationDbContext context,
//            IExcelService excelService,
//            IStringLocalizer<ImportPurchaseInvoicesCommandHandler> localizer)
//        {
//            _context = context;
//            _localizer = localizer;
//            _excelService = excelService;
//        }
//        #nullable disable warnings
//        public async Task<Result<int>> Handle(ImportPurchaseInvoicesCommand request, CancellationToken cancellationToken)
//        {

//           var result = await _excelService.ImportAsync(request.Data, mappers: new Dictionary<string, Func<DataRow, PurchaseInvoiceDto, object?>>
//            {
//                { _localizer[_dto.GetMemberDescription(x=>x.SupplierId)], (row, item) => item.SupplierId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.SupplierId)]]) }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.InvoiceNumber)], (row, item) => item.InvoiceNumber = row[_localizer[_dto.GetMemberDescription(x=>x.InvoiceNumber)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.InvoiceDate)], (row, item) => item.InvoiceDate =DateTime.Parse(row[_localizer[_dto.GetMemberDescription(x=>x.InvoiceDate)]].ToString()) }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.InvoiceType)], (row, item) => item.InvoiceType = row[_localizer[_dto.GetMemberDescription(x=>x.InvoiceType)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.TotalAmount)], (row, item) => item.TotalAmount =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.TotalAmount)]]) }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.VATAmount)], (row, item) => item.VATAmount =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.VATAmount)]]) }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.PaymentStatus)], (row, item) => item.PaymentStatus = row[_localizer[_dto.GetMemberDescription(x=>x.PaymentStatus)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.PaymentMethod)], (row, item) => item.PaymentMethod = row[_localizer[_dto.GetMemberDescription(x=>x.PaymentMethod)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.IBAN)], (row, item) => item.IBAN = row[_localizer[_dto.GetMemberDescription(x=>x.IBAN)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.SWIFT)], (row, item) => item.SWIFT = row[_localizer[_dto.GetMemberDescription(x=>x.SWIFT)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.Notes)], (row, item) => item.Notes = row[_localizer[_dto.GetMemberDescription(x=>x.Notes)]].ToString() }, 

//            }, _localizer[_dto.GetClassDescription()]);
//            if (result.Succeeded && result.Data is not null)
//            {
//                foreach (var dto in result.Data)
//                {
//                    var exists = await _context.PurchaseInvoices.AnyAsync(x => x.Name == dto.Name, cancellationToken);
//                    if (!exists)
//                    {
//                        var item = PurchaseInvoiceMapper.FromDto(dto);
//                        // add create domain events if this entity implement the IHasDomainEvent interface
//				        // item.AddDomainEvent(new PurchaseInvoiceCreatedEvent(item));
//                        await _context.PurchaseInvoices.AddAsync(item, cancellationToken);
//                    }
//                 }
//                 await _context.SaveChangesAsync(cancellationToken);
//                 return await Result<int>.SuccessAsync(result.Data.Count());
//           }
//           else
//           {
//               return await Result<int>.FailureAsync(result.Errors);
//           }
//        }
//        public async Task<Result<byte[]>> Handle(CreatePurchaseInvoicesTemplateCommand request, CancellationToken cancellationToken)
//        {
//            // TODO: Implement ImportPurchaseInvoicesCommandHandler method 
//            var fields = new string[] {
//                   // TODO: Define the fields that should be generate in the template, for example:
//                   _localizer[_dto.GetMemberDescription(x=>x.SupplierId)], 
//_localizer[_dto.GetMemberDescription(x=>x.InvoiceNumber)], 
//_localizer[_dto.GetMemberDescription(x=>x.InvoiceDate)], 
//_localizer[_dto.GetMemberDescription(x=>x.InvoiceType)], 
//_localizer[_dto.GetMemberDescription(x=>x.TotalAmount)], 
//_localizer[_dto.GetMemberDescription(x=>x.VATAmount)], 
//_localizer[_dto.GetMemberDescription(x=>x.PaymentStatus)], 
//_localizer[_dto.GetMemberDescription(x=>x.PaymentMethod)], 
//_localizer[_dto.GetMemberDescription(x=>x.IBAN)], 
//_localizer[_dto.GetMemberDescription(x=>x.SWIFT)], 
//_localizer[_dto.GetMemberDescription(x=>x.Notes)], 

//                };
//            var result = await _excelService.CreateTemplateAsync(fields, _localizer[_dto.GetClassDescription()]);
//            return await Result<byte[]>.SuccessAsync(result);
//        }
//    }

