//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-27
//     Last Modified: 2025-03-27
//     Description: 
//       This file defines the command and its handler for deleting one or more
//       PurchaseInvoice entities from the CleanArchitecture.Blazor application. It
//       implements caching invalidation logic to ensure that data consistency is
//       maintained. Domain events are triggered for deleted entities to support 
//       integration with other parts of the system.
//       for separation of concerns and encapsulation.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/purchaseinvoice
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to delete multiple PurchaseInvoices from the system by specifying
// their IDs. The handler also raises domain events for each deleted purchaseinvoice to
// notify other bounded contexts and invalidate relevant cache entries.

using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Caching;


namespace CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Commands.Delete;

public class DeletePurchaseInvoiceCommand:  ICacheInvalidatorRequest<Result<int>>
{
  public int[] Id {  get; }
  public string CacheKey => PurchaseInvoiceCacheKey.GetAllCacheKey;
  public IEnumerable<string>? Tags => PurchaseInvoiceCacheKey.Tags;
  public DeletePurchaseInvoiceCommand(int[] id)
  {
    Id = id;
  }
}

public class DeletePurchaseInvoiceCommandHandler : 
             IRequestHandler<DeletePurchaseInvoiceCommand, Result<int>>

{
    private readonly IApplicationDbContext _context;
    public DeletePurchaseInvoiceCommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(DeletePurchaseInvoiceCommand request, CancellationToken cancellationToken)
    {
        var items = await _context.PurchaseInvoices.Where(x=>request.Id.Contains(x.Id)).ToListAsync(cancellationToken);
        foreach (var item in items)
        {
		    // raise a delete domain event
			//item.AddDomainEvent(new PurchaseInvoiceDeletedEvent(item));
            _context.PurchaseInvoices.Remove(item);
        }
        var result = await _context.SaveChangesAsync(cancellationToken);
        return await Result<int>.SuccessAsync(result);
    }

}

