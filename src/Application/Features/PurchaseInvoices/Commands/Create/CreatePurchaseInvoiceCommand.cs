//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-27
//     Last Modified: 2025-03-27
//     Description: 
//       This file defines the command and its handler for creating a new PurchaseInvoice entity
//       within the CleanArchitecture.Blazor application. The command uses caching
//       invalidation to ensure data consistency and raises domain events to maintain 
//       the integrity of the entity lifecycle. It leverages Clean Architecture principles 
//       for separation of concerns and encapsulation.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/purchaseinvoice
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to create a new purchaseinvoice entity in the system. It includes
// the required fields for the purchaseinvoice and automatically raises necessary domain
// events for integration with other bounded contexts in the application.

using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Caching;
using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Mappers;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.Suppliers.DTOs;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.Commands.Create;

public class CreatePurchaseInvoiceCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Supplier id")]
    public int SupplierId {get;set;} 
    [Description("Invoice number")]
    public string? InvoiceNumber {get;set;} 
    [Description("Invoice date")]
    public DateTime? InvoiceDate {get;set;} 
    [Description("Invoice type")]
    public string? InvoiceType {get;set;} 
    [Description("Total amount")]
    public decimal TotalAmount {get;set;} 
    [Description("Vat amount")]
    public decimal VATAmount {get;set;} 
    [Description("Payment status")]
    public string? PaymentStatus {get;set;} 
    [Description("Payment method")]
    public string? PaymentMethod {get;set;} 
    [Description("Iban")]
    public string? IBAN {get;set;} 
    [Description("Swift")]
    public string? SWIFT {get;set;} 
    [Description("Notes")]
    public string? Notes {get;set;} 
    [Description("Supplier")]
    public SupplierDto Supplier {get;set;} 
    [Description("Items")]
    public List<PurchaseItemDto>? Items {get;set;} 

      public string CacheKey => PurchaseInvoiceCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => PurchaseInvoiceCacheKey.Tags;
}
    
    public class CreatePurchaseInvoiceCommandHandler : IRequestHandler<CreatePurchaseInvoiceCommand, Result<int>>
    {
        private readonly IApplicationDbContext _context;
        public CreatePurchaseInvoiceCommandHandler(
            IApplicationDbContext context)
        {
            _context = context;
        }
        public async Task<Result<int>> Handle(CreatePurchaseInvoiceCommand request, CancellationToken cancellationToken)
        {
           var item = PurchaseInvoiceMapper.FromCreateCommand(request);
           // raise a create domain event
	       //item.AddDomainEvent(new PurchaseInvoiceCreatedEvent(item));
           _context.PurchaseInvoices.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

