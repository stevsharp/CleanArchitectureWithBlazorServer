//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-27
//     Last Modified: 2025-03-27
//     Description: 
//       This file defines the UpdatePurchaseItemCommand and its handler for updating 
//       an existing PurchaseItem entity within the CleanArchitecture.Blazor application. 
//       It includes caching invalidation logic to maintain data consistency and 
//       raises a domain event upon successful update to notify other parts of the system.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/purchaseitem
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// Use `UpdatePurchaseItemCommand` to update an existing purchaseitem entity in the system. 
// The handler ensures that if the entity is found, the changes are applied and 
// the necessary domain event (`PurchaseItemUpdatedEvent`) is raised. Caching is also 
// invalidated to keep the purchaseitem list consistent.

using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.DTOs;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Caching;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Mappers;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseItems.Commands.Update;

public class UpdatePurchaseItemCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
            [Description("Invoice id")]
    public int InvoiceId {get;set;} 
    [Description("Item code")]
    public string? ItemCode {get;set;} 
    [Description("Item description")]
    public string? ItemDescription {get;set;} 
    [Description("Quantity")]
    public int Quantity {get;set;} 
    [Description("Unit")]
    public string? Unit {get;set;} 
    [Description("Color")]
    public string? Color {get;set;} 
    [Description("Unit price")]
    public decimal UnitPrice {get;set;} 
    [Description("Vat percentage")]
    public decimal VATPercentage {get;set;} 
    [Description("Vat amount")]
    public decimal VATAmount {get;set;} 
    [Description("Total amount")]
    public decimal TotalAmount {get;set;} 
    [Description("Invoice")]
    public PurchaseInvoiceDto Invoice {get;set;} 

      public string CacheKey => PurchaseItemCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => PurchaseItemCacheKey.Tags;

}

public class UpdatePurchaseItemCommandHandler : IRequestHandler<UpdatePurchaseItemCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    public UpdatePurchaseItemCommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(UpdatePurchaseItemCommand request, CancellationToken cancellationToken)
    {

       var item = await _context.PurchaseItems.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"PurchaseItem with id: [{request.Id}] not found.");
       }
    //   PurchaseItemMapper.ApplyChangesFrom(request, item);
	   // // raise a update domain event
	   //item.AddDomainEvent(new PurchaseItemUpdatedEvent(item));
       await _context.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

