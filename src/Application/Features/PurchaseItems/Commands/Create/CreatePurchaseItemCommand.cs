//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-27
//     Last Modified: 2025-03-27
//     Description: 
//       This file defines the command and its handler for creating a new PurchaseItem entity
//       within the CleanArchitecture.Blazor application. The command uses caching
//       invalidation to ensure data consistency and raises domain events to maintain 
//       the integrity of the entity lifecycle. It leverages Clean Architecture principles 
//       for separation of concerns and encapsulation.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/purchaseitem
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to create a new purchaseitem entity in the system. It includes
// the required fields for the purchaseitem and automatically raises necessary domain
// events for integration with other bounded contexts in the application.

using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.DTOs;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Caching;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Mappers;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseItems.Commands.Create;

public class CreatePurchaseItemCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Invoice id")]
    public int InvoiceId {get;set;} 
    [Description("Item code")]
    public string? ItemCode {get;set;} 
    [Description("Item description")]
    public string? ItemDescription {get;set;} 
    [Description("Quantity")]
    public int Quantity {get;set;} 
    [Description("Unit")]
    public string? Unit {get;set;} 
    [Description("Color")]
    public string? Color {get;set;} 
    [Description("Unit price")]
    public decimal UnitPrice {get;set;} 
    [Description("Vat percentage")]
    public decimal VATPercentage {get;set;} 
    [Description("Vat amount")]
    public decimal VATAmount {get;set;} 
    [Description("Total amount")]
    public decimal TotalAmount {get;set;} 
    [Description("Invoice")]
    public PurchaseInvoiceDto Invoice {get;set;} 

      public string CacheKey => PurchaseItemCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => PurchaseItemCacheKey.Tags;
}
    
    public class CreatePurchaseItemCommandHandler : IRequestHandler<CreatePurchaseItemCommand, Result<int>>
    {
        private readonly IApplicationDbContext _context;
        public CreatePurchaseItemCommandHandler(
            IApplicationDbContext context)
        {
            _context = context;
        }
        public async Task<Result<int>> Handle(CreatePurchaseItemCommand request, CancellationToken cancellationToken)
        {
        //   var item = PurchaseItemMapper.FromCreateCommand(request);
        //   // raise a create domain event
        ////item.AddDomainEvent(new PurchaseItemCreatedEvent(item));
        //   _context.PurchaseItems.Add(item);
        //   await _context.SaveChangesAsync(cancellationToken);
        //   return  await Result<int>.SuccessAsync(item.Id);

        return await Result<int>.SuccessAsync(0);
    }
    }

