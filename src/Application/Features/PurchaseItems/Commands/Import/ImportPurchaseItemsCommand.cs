////------------------------------------------------------------------------------
//// <auto-generated>
////     This file is part of the CleanArchitecture.Blazor project.
////     Licensed to the .NET Foundation under one or more agreements.
////     The .NET Foundation licenses this file to you under the MIT license.
////     See the LICENSE file in the project root for more information.
////
////     Author: neozhu
////     Created Date: 2025-03-27
////     Last Modified: 2025-03-27
////     Description: 
////       This file defines the command, handler, and associated logic for importing 
////       purchaseitems from an Excel file into the CleanArchitecture.Blazor application. 
////       The import process supports validating data and ensuring no duplicates are 
////       inserted. Additionally, a command for creating a purchaseitem template file is provided 
////       to facilitate bulk data entry for end users.
////     
////     Documentation:
////       https://docs.cleanarchitectureblazor.com/features/purchaseitem
//// </auto-generated>
////------------------------------------------------------------------------------

//// Usage:
//// - Use `ImportPurchaseItemsCommand` to import purchaseitems from an Excel file, ensuring proper validation
////   and avoiding duplicates.
//// - Use `CreatePurchaseItemsTemplateCommand` to generate an Excel template for entering purchaseitem data 
////   that can be later imported using the import command.

//using CleanArchitecture.Blazor.Application.Features.PurchaseItems.DTOs;
//using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Caching;
//using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Mappers;

//namespace CleanArchitecture.Blazor.Application.Features.PurchaseItems.Commands.Import;

//    public class ImportPurchaseItemsCommand: ICacheInvalidatorRequest<Result<int>>
//    {
//        public string FileName { get; set; }
//        public byte[] Data { get; set; }
//        public string CacheKey => PurchaseItemCacheKey.GetAllCacheKey;
//        public IEnumerable<string>? Tags => PurchaseItemCacheKey.Tags;
//        public ImportPurchaseItemsCommand(string fileName,byte[] data)
//        {
//           FileName = fileName;
//           Data = data;
//        }
//    }
//    public record class CreatePurchaseItemsTemplateCommand : IRequest<Result<byte[]>>
//    {
 
//    }

//    public class ImportPurchaseItemsCommandHandler : 
//                 IRequestHandler<CreatePurchaseItemsTemplateCommand, Result<byte[]>>,
//                 IRequestHandler<ImportPurchaseItemsCommand, Result<int>>
//    {
//        private readonly IApplicationDbContext _context;
//        private readonly IStringLocalizer<ImportPurchaseItemsCommandHandler> _localizer;
//        private readonly IExcelService _excelService;
//        private readonly PurchaseItemDto _dto = new();

//        public ImportPurchaseItemsCommandHandler(
//            IApplicationDbContext context,
//            IExcelService excelService,
//            IStringLocalizer<ImportPurchaseItemsCommandHandler> localizer)
//        {
//            _context = context;
//            _localizer = localizer;
//            _excelService = excelService;
//        }
//        #nullable disable warnings
//        public async Task<Result<int>> Handle(ImportPurchaseItemsCommand request, CancellationToken cancellationToken)
//        {

//           var result = await _excelService.ImportAsync(request.Data, mappers: new Dictionary<string, Func<DataRow, PurchaseItemDto, object?>>
//            {
//                { _localizer[_dto.GetMemberDescription(x=>x.InvoiceId)], (row, item) => item.InvoiceId =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.InvoiceId)]]) }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.ItemCode)], (row, item) => item.ItemCode = row[_localizer[_dto.GetMemberDescription(x=>x.ItemCode)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.ItemDescription)], (row, item) => item.ItemDescription = row[_localizer[_dto.GetMemberDescription(x=>x.ItemDescription)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.Quantity)], (row, item) => item.Quantity =Convert.ToInt32(row[_localizer[_dto.GetMemberDescription(x=>x.Quantity)]]) }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.Unit)], (row, item) => item.Unit = row[_localizer[_dto.GetMemberDescription(x=>x.Unit)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.Color)], (row, item) => item.Color = row[_localizer[_dto.GetMemberDescription(x=>x.Color)]].ToString() }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.UnitPrice)], (row, item) => item.UnitPrice =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.UnitPrice)]]) }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.VATPercentage)], (row, item) => item.VATPercentage =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.VATPercentage)]]) }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.VATAmount)], (row, item) => item.VATAmount =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.VATAmount)]]) }, 
//{ _localizer[_dto.GetMemberDescription(x=>x.TotalAmount)], (row, item) => item.TotalAmount =Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x=>x.TotalAmount)]]) }, 

//            }, _localizer[_dto.GetClassDescription()]);
//            if (result.Succeeded && result.Data is not null)
//            {
//                foreach (var dto in result.Data)
//                {
//                    var exists = await _context.PurchaseItems.AnyAsync(x => x.Name == dto.Name, cancellationToken);
//                    if (!exists)
//                    {
//                        var item = PurchaseItemMapper.FromDto(dto);
//                        // add create domain events if this entity implement the IHasDomainEvent interface
//				        // item.AddDomainEvent(new PurchaseItemCreatedEvent(item));
//                        await _context.PurchaseItems.AddAsync(item, cancellationToken);
//                    }
//                 }
//                 await _context.SaveChangesAsync(cancellationToken);
//                 return await Result<int>.SuccessAsync(result.Data.Count());
//           }
//           else
//           {
//               return await Result<int>.FailureAsync(result.Errors);
//           }
//        }
//        public async Task<Result<byte[]>> Handle(CreatePurchaseItemsTemplateCommand request, CancellationToken cancellationToken)
//        {
//            // TODO: Implement ImportPurchaseItemsCommandHandler method 
//            var fields = new string[] {
//                   // TODO: Define the fields that should be generate in the template, for example:
//                   _localizer[_dto.GetMemberDescription(x=>x.InvoiceId)], 
//_localizer[_dto.GetMemberDescription(x=>x.ItemCode)], 
//_localizer[_dto.GetMemberDescription(x=>x.ItemDescription)], 
//_localizer[_dto.GetMemberDescription(x=>x.Quantity)], 
//_localizer[_dto.GetMemberDescription(x=>x.Unit)], 
//_localizer[_dto.GetMemberDescription(x=>x.Color)], 
//_localizer[_dto.GetMemberDescription(x=>x.UnitPrice)], 
//_localizer[_dto.GetMemberDescription(x=>x.VATPercentage)], 
//_localizer[_dto.GetMemberDescription(x=>x.VATAmount)], 
//_localizer[_dto.GetMemberDescription(x=>x.TotalAmount)], 

//                };
//            var result = await _excelService.CreateTemplateAsync(fields, _localizer[_dto.GetClassDescription()]);
//            return await Result<byte[]>.SuccessAsync(result);
//        }
//    }

