//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-27
//     Last Modified: 2025-03-27
//     Description: 
//       This file defines the command for adding or editing a purchaseitem entity,
//       including validation and mapping operations. It handles domain events
//       and cache invalidation for updated or newly created purchaseitem.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/purchaseitem
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to add a new purchaseitem or edit an existing one.
// It handles caching logic and domain event raising automatically.


using CleanArchitecture.Blazor.Application.Features.PurchaseInvoices.DTOs;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Caching;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Mappers;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseItems.Commands.AddEdit;

public class AddEditPurchaseItemCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Invoice id")]
    public int InvoiceId {get;set;} 
    [Description("Item code")]
    public string? ItemCode {get;set;} 
    [Description("Item description")]
    public string? ItemDescription {get;set;} 
    [Description("Quantity")]
    public int Quantity {get;set;} 
    [Description("Unit")]
    public string? Unit {get;set;} 
    [Description("Color")]
    public string? Color {get;set;} 
    [Description("Unit price")]
    public decimal UnitPrice {get;set;} 
    [Description("Vat percentage")]
    public decimal VATPercentage {get;set;} 
    [Description("Vat amount")]
    public decimal VATAmount {get;set;} 
    [Description("Total amount")]
    public decimal TotalAmount {get;set;} 
    [Description("Invoice")]
    public PurchaseInvoiceDto Invoice {get;set;} 


      public string CacheKey => PurchaseItemCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => PurchaseItemCacheKey.Tags;
}

public class AddEditPurchaseItemCommandHandler : IRequestHandler<AddEditPurchaseItemCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    public AddEditPurchaseItemCommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(AddEditPurchaseItemCommand request, CancellationToken cancellationToken)
    {
        if (request.Id > 0)
        {
            var item = await _context.PurchaseItems.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"PurchaseItem with id: [{request.Id}] not found.");
            }
            //PurchaseItemMapper.ApplyChangesFrom(request,item);
			// raise a update domain event
			//item.AddDomainEvent(new PurchaseItemUpdatedEvent(item));
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
   //         var item = PurchaseItemMapper.FromEditCommand(request);
   //         // raise a create domain event
			////item.AddDomainEvent(new PurchaseItemCreatedEvent(item));
   //         _context.PurchaseItems.Add(item);
   //         await _context.SaveChangesAsync(cancellationToken);
   //         return await Result<int>.SuccessAsync(item.Id);
        }
       
        return await Result<int>.FailureAsync("An error occurred while processing your request.");  
    }
}

