//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-27
//     Last Modified: 2025-03-27
//     Description: 
//       Defines a query to retrieve a purchaseitem by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same purchaseitem.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.PurchaseItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Caching;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Mappers;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseItems.Queries.GetById;

public class GetPurchaseItemByIdQuery : ICacheableRequest<Result<PurchaseItemDto>>
{
   public required int Id { get; set; }
   public string CacheKey => PurchaseItemCacheKey.GetByIdCacheKey($"{Id}");
   public IEnumerable<string>? Tags => PurchaseItemCacheKey.Tags;
}

public class GetPurchaseItemByIdQueryHandler :
     IRequestHandler<GetPurchaseItemByIdQuery, Result<PurchaseItemDto>>
{
    private readonly IApplicationDbContext _context;

    public GetPurchaseItemByIdQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<Result<PurchaseItemDto>> Handle(GetPurchaseItemByIdQuery request, CancellationToken cancellationToken)
    {
        //var data = await _context.PurchaseItems.ApplySpecification(new PurchaseItemByIdSpecification(request.Id))
        //                                        .ProjectTo()
        //                                        .FirstAsync(cancellationToken);
        //return await Result<PurchaseItemDto>.SuccessAsync(data);

        return await Result<PurchaseItemDto>.SuccessAsync(new PurchaseItemDto());
    }
}
