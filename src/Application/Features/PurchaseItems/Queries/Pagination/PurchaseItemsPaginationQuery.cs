//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-27
//     Last Modified: 2025-03-27
//     Description: 
//       Defines a query for retrieving purchaseitems with pagination and filtering 
//       options. The result is cached to enhance performance for repeated queries.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.PurchaseItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Caching;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Mappers;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseItems.Queries.Pagination;

public class PurchaseItemsWithPaginationQuery : PurchaseItemAdvancedFilter, ICacheableRequest<PaginatedData<PurchaseItemDto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}-{LocalTimezoneOffset.TotalHours}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public string CacheKey => PurchaseItemCacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags => PurchaseItemCacheKey.Tags;
    public PurchaseItemAdvancedSpecification Specification => new PurchaseItemAdvancedSpecification(this);
}
    
//public class PurchaseItemsWithPaginationQueryHandler :
//         IRequestHandler<PurchaseItemsWithPaginationQuery, PaginatedData<PurchaseItemDto>>
//{
//        private readonly IApplicationDbContext _context;

//        public PurchaseItemsWithPaginationQueryHandler(
//            IApplicationDbContext context)
//        {
//            _context = context;
//        }

//        public async Task<PaginatedData<PurchaseItemDto>> Handle(PurchaseItemsWithPaginationQuery request, CancellationToken cancellationToken)
//        {
//           var data = await _context.PurchaseItems.OrderBy($"{request.OrderBy} {request.SortDirection}")
//                                                   .ProjectToPaginatedDataAsync(request.Specification, 
//                                                                                request.PageNumber, 
//                                                                                request.PageSize, 
//                                                                                PurchaseItemMapper.ToDto, 
//                                                                                cancellationToken);
//            return data;
//        }
//}