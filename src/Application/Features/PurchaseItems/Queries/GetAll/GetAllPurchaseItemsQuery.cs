//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-03-27
//     Last Modified: 2025-03-27
//     Description: 
//       Defines a query to retrieve all purchaseitems from the database. The result 
//       is cached to improve performance and reduce database load for repeated 
//       queries.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.PurchaseItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Mappers;
using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Caching;

namespace CleanArchitecture.Blazor.Application.Features.PurchaseItems.Queries.GetAll;

public class GetAllPurchaseItemsQuery : ICacheableRequest<IEnumerable<PurchaseItemDto>>
{
   public string CacheKey => PurchaseItemCacheKey.GetAllCacheKey;
   public IEnumerable<string>? Tags => PurchaseItemCacheKey.Tags;
}

public class GetAllPurchaseItemsQueryHandler :
     IRequestHandler<GetAllPurchaseItemsQuery, IEnumerable<PurchaseItemDto>>
{
    private readonly IApplicationDbContext _context;

    public GetAllPurchaseItemsQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<PurchaseItemDto>> Handle(GetAllPurchaseItemsQuery request, CancellationToken cancellationToken)
    {
        //var data = await _context.PurchaseItems.ProjectTo()
        //                                        .AsNoTracking()
        //                                        .ToListAsync(cancellationToken);
        //return data;

        return null!;
    }
}


