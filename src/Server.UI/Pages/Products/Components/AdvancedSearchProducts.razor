@using CleanArchitecture.Blazor.Application.Features.Categories.Queries.GetAll
@using CleanArchitecture.Blazor.Application.Features.Products.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Categories.DTOs;
@using CleanArchitecture.Blazor.Server.UI.Components.Autocompletes;
@inject IStringLocalizer<Products> L

<MudExpansionPanel @bind-Expanded="_advancedSearchExpanded"
                   Style="border-radius: var(--mud-default-borderradius) !important;"
                   Class="mud-elevation-25 pa-2 mb-3" Text="@ConstantString.AdvancedSearch">
    <MudGrid Spacing="2">
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="TRequest.Name"
                          Variant="Variant.Outlined"
                          Placeholder="@L["Search by product name"]"
                          Clearable="true"
                          TextChanged="TextChanged">
            </MudTextField>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">

            <MudTextField @bind-Value="TRequest.Code"
                          Variant="Variant.Outlined"
                          Placeholder="@L["Search by product code"]"
                          Clearable="true"
                          TextChanged="TextChanged">
            </MudTextField>

            @*  <PicklistAutocomplete Picklist="Picklist.Brand"
                                    T="string"
                                  Placeholder="@L["Search by brand"]"
                                  TextChanged="TextChanged"
                                  ResetValueOnEmptyText="true"
                                  @bind-Value="TRequest.Brand">
            </PicklistAutocomplete> *@
        </MudItem>
        <MudItem xs="12" sm="6" md="4">

            <MudSelect T="int"
                       Clearable="true"
                       Variant="Variant.Outlined"
                       Label="@L["Category"]"
                       Value="TRequest.CategoryId"
                       ValueChanged="OnCategoryChanged">
                @if (Categories is not null)
                {
                    foreach (var contact in Categories)
                    {
                        <MudSelectItem Value="@contact.Id" Label="@contact.Name">
                            @contact.Name
                        </MudSelectItem>
                    }
                }
            </MudSelect>

        </MudItem>
      
    </MudGrid>
</MudExpansionPanel>

@code
{

    public IEnumerable<CategoryDto> Categories { get; set; } = default!;
    private CategoryDto? SelectedCategory;
    private GetAllCategoriesQuery getAllCategoriesQuery = new GetAllCategoriesQuery();

    protected override async Task OnInitializedAsync()
    {
        Categories = await Mediator.Send(getAllCategoriesQuery);
    }

    [EditorRequired][Parameter] public ProductsWithPaginationQuery TRequest { get; set; } = default!;
    [EditorRequired][Parameter] public EventCallback<string> OnConditionChanged { get; set; }

    [EditorRequired][Parameter] public EventCallback<int> OnCategoryChangedEvent { get; set; }

    private bool _advancedSearchExpanded;

    private async Task OnCategoryChanged(int selectedId)
    {
        TRequest.CategoryId = selectedId;

        await OnCategoryChangedEvent.InvokeAsync(selectedId);
    }


    private async Task TextChanged(string str)
    {
        if (_advancedSearchExpanded)
        {
            await OnConditionChanged.InvokeAsync(str);
        }
    }

}