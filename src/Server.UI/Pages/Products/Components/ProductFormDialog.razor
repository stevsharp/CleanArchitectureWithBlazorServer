@using CleanArchitecture.Blazor.Application.Features.Categories.Queries.GetAll
@using CleanArchitecture.Blazor.Application.Features.SubProducts.Caching
@using CleanArchitecture.Blazor.Application.Features.SubProducts.DTOs
@using CleanArchitecture.Blazor.Application.Features.SubProducts.Queries.GetById
@using CleanArchitecture.Blazor.Server.UI.Components.Fusion
@using MudBlazor.Utilities
@using ResizeMode = SixLabors.ImageSharp.Processing.ResizeMode
@using Size = SixLabors.ImageSharp.Size
@using Image = SixLabors.ImageSharp.Image
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using CleanArchitecture.Blazor.Application.Features.Products.Commands.AddEdit
@using CleanArchitecture.Blazor.Domain.Common.Enums
@using CleanArchitecture.Blazor.Server.UI.Services.JsInterop
@using System.Collections.Immutable
@using CleanArchitecture.Blazor.Application.Features.Categories.DTOs;
@using CleanArchitecture.Blazor.Application.Features.PicklistSets.DTOs;
@inject IStringLocalizer<Products> L
@inject IUploadService UploadService
@inject IPicklistService PicklistService

<MudDialog>
    <DialogContent>
        <ActiveUserSession PageComponent="@($"{nameof(ProductFormDialog)}/{ Model.Id}")" />
        <MudForm Model="@Model" @ref="@_form" FieldChanged="OnFieldChanged" Validation="@(Validator.ValidateValue(Model))">
            <MudGrid Spacing="2">

                <MudItem xs="12" sm="6">
                    <MudTextField Label="@L["Product Code"]" @bind-Value="Model.Code"
                    For="@(() => Model.Code)"
                    Required="true"
                    RequiredError="@L["product code is required!"]">
                    </MudTextField>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField Label="@L["Product Name"]" @bind-Value="Model.Name"
                    For="@(() => Model.Name)"
                    Required="true"
                    RequiredError="@L["product name is required!"]">
                    </MudTextField>
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="@L["Description"]"
                    Lines="3"
                    Variant="Variant.Outlined"
                    For="@(() => Model.Description)"
                    @bind-Value="Model.Description">
                    </MudTextField>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <PicklistMultiSelect Name="Picklist.Color" SelectedValues="colorData"
                    SelectedValuesChanged="ColorSelectedValuesChanged"
                    Label="@L["Select Product Color"]" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <PicklistMultiSelect Name="Picklist.Unit" SelectedValues="unitData" SelectedValuesChanged="UnitSelectedValuesChanged"
                    Label="@L["Select Product Unit"]" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudSelect T="CategoryDto"
                    Variant="Variant.Outlined"
                    Required="true" RequiredError="@L["customer id is required!"]"
                    Label="@L["Category"]" @bind-Value="SelectedCategory">
                        @if (Categories is not null)
                        {
                            @foreach (var contact in Categories)
                            {
                                <MudSelectItem Value="contact"
                                Label="@($"{contact.Name}")">
                                    @($"{contact.Name}")
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField ReadOnly="true"
                    Lines="3"
                    Label="@L["Sub Categories"]"
                    Variant="Variant.Outlined"
                    Value="@(string.Join(", ", SelectedCategory?.SubCategories?.Select(x => x.Name) ?? Enumerable.Empty<string>()))"
                    Required="false">
                    </MudTextField>
                </MudItem>

                @*  <MudItem xs="12" sm="4">
                    <MudNumericField Label="@L["Price"]"
                    Variant="Variant.Outlined"
                    T="decimal"
                    Format="N2"
                    For="@(() => Model.Price)"
                    Min="0.00m"
                    @bind-Value="Model.Price">
                    </MudNumericField>
                </MudItem>

                <MudItem xs="12" sm="4">
                    <MudNumericField Label="@L["RetailPrice"]"
                    Variant="Variant.Outlined"
                    T="decimal"
                    Format="N2"
                    For="@(() => Model.RetailPrice)"
                    Min="0.00m"
                    @bind-Value="Model.RetailPrice">
                    </MudNumericField>
                </MudItem> *@

                @*                 <MudItem xs="12" sm="4">
                    <MudNumericField Label="@L["Stock"]"
                    ReadOnly="true"
                    T="int"
                                     For="@(() => Model.SubProducts.Sum(x => x.Stock))"
                    @bind-Value="Model.Stock">
                    </MudNumericField>
                </MudItem> *@

                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined"
                    Lines="4" Label="@L["AdditionalInfo"]" @bind-Value="Model.AdditionalInfo"
                    For="@(() => Model.AdditionalInfo)"
                    Required="false">
                    </MudTextField>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField Variant="Variant.Outlined" Label="@L["ProductUrl"]" @bind-Value="Model.ProductUrl"
                    For="@(() => Model.ProductUrl)"
                    Required="false">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="@L["Image Url"]" @bind-Value="Model.ImageUrl"
                    For="@(() => Model.ImageUrl)"
                    Variant="Variant.Outlined"
                    Required="false">
                    </MudTextField>
                </MudItem>

                <MudItem xs="12">
                    @*                     <MudTable Items="Variants" T="VariantOption">
                        <HeaderContent>
                            <MudTh>Color</MudTh>
                            <MudTh>Unit</MudTh>
                            <MudTh>Stock</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Color</MudTd>
                            <MudTd>@context.Unit</MudTd>
                            <MudTd>
                                <MudNumericField T="int?" @bind-Value="context.Stock" HideSpinButtons="true" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable> *@

                    @*                     <MudTable Items="Variants" T="VariantOption">
                        <HeaderContent>
                            <MudTh></MudTh> <!-- Top-left empty -->
                            @foreach (var unit in Units)
                            {
                                <MudTh>@unit</MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>

                            @{
                                var uniqueColors = Variants.Select(v => v.Color).Distinct().ToList();
                            }

                            @foreach (var color in uniqueColors)
                            {
                                <MudTr>
                                    <MudTd>@color</MudTd>

                                    @foreach (var unit in Units)
                                    {
                                        var colorExist = Variants.Any(v => v.Color == color);

                                        if (colorExist)
                                        {

                                            var variant = Variants.FirstOrDefault(v => v.Color == color && v.Unit == unit);
                                            <MudTd>
                                                <MudNumericField T="int?" @bind-Value="variant.Stock" HideSpinButtons="true" Style="width: 60px;" />
                                            </MudTd>
                                        }
                                        else
                                        {
                                            continue;
                                        }

                                    }
                                </MudTr>
                            }
                        </RowTemplate>
                    </MudTable>
 *@
                    <MudPaper Class="pa-4">
                        <table class="mud-table mud-table-bordered mud-table-dense" style="width: 100%;">
                            <thead>
                                <tr>
                                    <th></th> <!-- Color column -->
                                    @foreach (var unit in OptionsUnits.Select(x => x.Value).Distinct())
                                    {
                                        <th style="text-align: left;">@unit</th>
                                    }
                                    <th style="text-align: left;"> Price</th>
                                    <th style="text-align: left;"> Retai lPrice</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var color in Variants.Select(v => v.Color).Distinct())
                                {
                                    <tr>
                                        <td>@color</td>

                                        @foreach (var unit in OptionsUnits.Select(x => x.Value).Distinct())
                                        {
                                            var variant = Variants.FirstOrDefault(v => v.Color == color && v.Unit == unit);
                                            <td style="text-align: center;">
                                                @if (variant is not null)
                                                {
                                                    <MudNumericField T="int" @bind-Value="variant.Stock"
                                                    HideSpinButtons="true" Style="width: 60px;" />
                                                }
                                                else
                                                {
                                                    <MudNumericField T="int" Disabled="true" Value="0"
                                                    HideSpinButtons="true" Style="width: 60px;" />
                                                }
                                            </td>
                                        }

                                        @{
                                            // Get any variant of this color to display its RetailPrice (same across units)
                                            var colorVariant = Variants.FirstOrDefault(v => v.Color == color);
                                        }

                                        <td style="text-align: center;">
                                            @if (colorVariant is not null)
                                            {
                                                <MudNumericField T="decimal" @bind-Value="colorVariant.Price" HideSpinButtons="true" Style="width: 80px;" />
                                            }
                                            else
                                            {
                                                <MudNumericField T="decimal" Disabled="true" Value="0" HideSpinButtons="true" Style="width: 80px;" />
                                            }
                                        </td>


                                        <td style="text-align: center;">
                                            @if (colorVariant is not null)
                                            {
                                                <MudNumericField T="decimal" @bind-Value="colorVariant.RetailPrice"HideSpinButtons="true" Style="width: 80px;" />
                                            }
                                            else
                                            {
                                                <MudNumericField T="decimal" Disabled="true" Value="0" HideSpinButtons="true" Style="width: 80px;" />
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </MudPaper>
                </MudItem>

                @*  <MudItem xs="12">
                    <PicklistAutocomplete Picklist="Picklist.Unit" T="string"
                    Label="@L["Unit"]"
                    For="@(() => Model.Unit)"
                    ResetValueOnEmptyText="true"
                    ShowProgressIndicator="true"
                    @bind-Value="Model.Unit">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="MudBlazor.Size.Small" Indeterminate="true" />
                        </ProgressIndicatorTemplate>
                    </PicklistAutocomplete>
                </MudItem>

                <MudItem xs="12">
                    <PicklistAutocomplete Picklist="Picklist.Color" T="string"
                    Label="@L["Color"]"
                    For="@(() => Model.Color)"
                    ResetValueOnEmptyText="true"
                    ShowProgressIndicator="true"
                    @bind-Value="Model.Color">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="MudBlazor.Size.Small" Indeterminate="true" />
                        </ProgressIndicatorTemplate>
                    </PicklistAutocomplete>
                </MudItem> *@

                <MudItem xs="12">
                    <MudStack Spacing="1" Class="mb-2">
                        <MudText Typo="Typo.body2">@L["The recommended size for uploading images is 640X320"]</MudText>
                        <MudFileUpload T="IReadOnlyList<IBrowserFile>" multiple
                        @bind-Files="Model.UploadPictures"
                        For="@(() => Model.UploadPictures)"
                        OnFilesChanged="UploadFiles" Accept=".pdf,image/*"
                        Hidden="@false"
                        InputClass="absolute mud-width-full mud-height-full overflow-hidden z-100"
                        InputStyle="opacity:0"
                        tabindex="-1"
                        @ondrop="@ClearDragClass"
                        @ondragenter="@SetDragClass"
                        @ondragleave="@ClearDragClass"
                        @ondragend="@ClearDragClass"
                        AppendMultipleFiles>
                            <ActivatorContent>
                                <MudPaper Class="@_dragClass" Style="width:260px;height:70px;">
                                    <MudLoadingButton Loading="@_uploading" Disabled="@_uploading" Variant="Variant.Text" Class="align-self-center" Style="text-transform:none"
                                    StartIcon="@Icons.Material.Filled.CloudUpload">
                                        @L["choose image or pdf"]
                                    </MudLoadingButton>
                                </MudPaper>
                            </ActivatorContent>

                        </MudFileUpload>
                        @if (Model.Pictures is not null)
                        {
                            <MudSimpleTable Hover Dense Elevation="0">
                                <tbody>
                                    @foreach (var dto in Model.Pictures)
                                    {
                                        <tr @onclick="()=>OnDownloadFile(dto.Url)" style="cursor:pointer">
                                            <td><Thumbnail FileName="@dto.Name" FileUrl="@dto.Url"> </Thumbnail></td>
                                            <td><FileSizeFormatter FileSizeInBytes="@dto.Size"></FileSizeFormatter></td>
                                            <td style="width:50px"><MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" title="@ConstantString.Delete" OnClick="@(()=>DeleteImage(dto))"></MudIconButton></td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        }
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudForm>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_saveingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving" Disabled="!HasChanges" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    [EditorRequired]
    [Parameter]
    public AddEditProductCommand Model { get; set; } = default!;

    [Parameter] public Action? Refresh { get; set; }
    private HashSet<string> _StringSelectedItems = new();
    private MudForm? _form;
    private bool _saving;
    private bool _saveingnew;
    private bool _uploading;

    protected IEnumerable<PicklistSetDto> colorData = new List<PicklistSetDto>();
    protected IEnumerable<PicklistSetDto> unitData = new List<PicklistSetDto>();
    protected IEnumerable<SubProductDto> subProducts = new List<SubProductDto>();
    public IEnumerable<CategoryDto> Categories { get; set; } = default!;
    private CategoryDto? SelectedCategory;
    private GetAllCategoriesQuery getAllCategoriesQuery = new GetAllCategoriesQuery();

    private GetSubProductByProductIdQuery getSubProductByProductByIdQuery = default!;

    private const long MaxAllowedSize = 3145728;

    private async Task DeleteImage(ProductImage picture)
    {
        if (Model.Pictures != null)
        {
            var parameters = new DialogParameters<ConfirmationDialog>
            {
                { x => x.ContentText, $"{L["Are you sure you want to erase this image?"]}" }
            };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
            var dialog = await DialogService.ShowAsync<ConfirmationDialog>($"{L["Erase imatge"]}", parameters, options);
            var state = await dialog.Result;

            if (state is not null && !state.Canceled)
            {
                Model.Pictures.Remove(picture);
            }
        }
    }

    private const string DefaultDragClass = "pa-4 d-flex align-content-center align-center flex-grow-1 mb-2 flex-wrap border-2 border-dashed";
    private string _dragClass = DefaultDragClass;
    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary mud-elevation-25 border-4";


    private bool HasChanges = false;

    //private List<string> Units = new() { "S", "M", "L", "XL" };
    private List<SubProductDto> Variants = new();

    protected IEnumerable<PicklistSetDto> OptionsColors = new List<PicklistSetDto>();
    protected IEnumerable<PicklistSetDto> OptionsUnits = new List<PicklistSetDto>();

    protected override async Task OnInitializedAsync()
    {
        OptionsColors = PicklistService.DataSource.Where(x => x.Name == Picklist.Color).ToList();
        OptionsUnits = PicklistService.DataSource.Where(x => x.Name == Picklist.Unit).ToList();

        SubProductCacheKey.Refresh();

        var subResult = await Mediator.Send(new GetSubProductByProductIdQuery { ProductId = Model.Id }).ConfigureAwait(false);

        if (subResult.Succeeded)
        {
            this.subProducts = subResult.Data ?? new List<SubProductDto>();
        }

        Variants = (from color in OptionsColors.Select(x => x.Value).Distinct()
                    from unit in OptionsUnits.Select(x => x.Value).Distinct()
                    let existing = subProducts.FirstOrDefault(v => v.Color == color && v.Unit == unit)
                    select existing ?? new SubProductDto
                        {
                            Id = existing?.Id ?? 0,
                            ProductId = Model.Id,
                            Color = color,
                            Unit = unit,
                            Stock = existing?.Stock ?? 0,
                            Price = existing?.Price ?? 0,
                            RetailPrice = existing?.RetailPrice ?? 0
                        }).ToList();

        var result = await Mediator.Send(getAllCategoriesQuery).ConfigureAwait(false);

        if (result.Any())
        {
            Categories = result.ToList();

            if (Model.CategoryId > 0)
                SelectedCategory = Categories.First(x => x.Id == Model.CategoryId);
        }

        this.colorData = Model.ColorData;
        this.unitData = Model.UnitData;

    }

    private void OnFieldChanged(FormFieldChangedEventArgs args)
    {
        HasChanges = true;
    }

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            ClearDragClass();
            _uploading = true;
            var list = new List<ProductImage>();
            foreach (var file in e.GetMultipleFiles())
            {
                try
                {
                    var filestream = file.OpenReadStream(GlobalVariable.MaxAllowedSize);
                    var attachStream = new MemoryStream();
                    await filestream.CopyToAsync(attachStream);
                    attachStream.Position = 0;
                    var filename = file.Name;
                    var fi = new FileInfo(filename);
                    var ext = fi.Extension;
                    if (ext.EndsWith(".pdf"))
                    {
                        var result = await UploadService.UploadAsync(new UploadRequest(Guid.NewGuid() + ext, UploadType.Product, attachStream.ToArray()));
                        list.Add(new ProductImage { Name = filename, Size = attachStream.Length, Url = result });
                    }
                    else
                    {
                        using (var outStream = new MemoryStream())
                        {
                            using (var image = Image.Load(attachStream))
                            {
                                image.Mutate(
                                    i => i.Resize(new ResizeOptions { Mode = ResizeMode.Crop, Size = new Size(640, 320) }));
                                image.Save(outStream, PngFormat.Instance);
                                var result = await UploadService.UploadAsync(new UploadRequest(Guid.NewGuid() + ext, UploadType.Product, outStream.ToArray()));
                                list.Add(new ProductImage { Name = filename, Size = outStream.Length, Url = result });
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"{ex.Message}", Severity.Error);
                }
            }

            Snackbar.Add(L["Upload pictures successfully"], Severity.Info);

            if (Model.Pictures is null)
                Model.Pictures = list;
            else
                Model.Pictures.AddRange(list);
        }
        finally
        {
            _uploading = false;
        }
    }

    private async Task Submit()
    {
        try
        {

            _saving = true;

            Model.SubProducts = Variants;
            Model.SetDefaultValues();

            await _form!.Validate().ConfigureAwait(false);

            if (!_form!.IsValid)
                return;

            if (SelectedCategory is null)
                return;

            Model.CategoryId = SelectedCategory.Id;
            Model.ColorData.AddRange(colorData);
            Model.UnitData.AddRange(unitData);

            var result = await Mediator.Send(Model);
            result.Match(
            data =>
            {
                Model.Id = data;

                MudDialog.Close(DialogResult.Ok(Model));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                return data;
            },
            errors =>
            {
                Snackbar.Add(errors, Severity.Error);
                return 0;
            });
        }
        finally
        {
            _saving = false;
        }
    }

    private async Task SaveAndNew()
    {
        try
        {
            _saveingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(Model);

            Model.ColorData.AddRange(colorData);
            Model.UnitData.AddRange(unitData);

            result.Match(
            data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                Refresh?.Invoke();
                Model = new AddEditProductCommand();
                return data;
            },
            errors =>
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
                return 0;
            });
        }
        finally
        {
            _saveingnew = false;
        }
    }

    private void ColorSelectedValuesChanged(IEnumerable<PicklistSetDto> selectedValues)
    {
        colorData = selectedValues;
    }

    private void UnitSelectedValuesChanged(IEnumerable<PicklistSetDto> selectedValues)
    {
        unitData = selectedValues;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private async Task OnDownloadFile(string? str)
    {
        var fileURL = str;
        await new Fancybox(JS).Preview(str ?? string.Empty, []);
    }
}