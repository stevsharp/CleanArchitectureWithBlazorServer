@using CleanArchitecture.Blazor.Application.Features.Suppliers.Queries.Pagination
@inject IStringLocalizer<Suppliers> L

<MudExpansionPanel @bind-Expanded="_advancedSearchExpanded"
                   Style="border-radius: var(--mud-default-borderradius) !important;"
                   Class="mud-elevation-25 pa-2 mb-3" Text="@ConstantString.AdvancedSearch">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">

            <MudTextField @bind-Value="TRequest.Name" 
                          Placeholder="@L["Search for name"]"
                          Clearable="true"
                          TextChanged="TextChanged">
            </MudTextField>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">

            <MudTextField @bind-Value="TRequest.Email"
                          Placeholder="@L["Search for Email"]"
                          Clearable="true"
                          TextChanged="TextChanged">
            </MudTextField>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="TRequest.Country"
                          Placeholder="@L["Search for Country"]"
                          Clearable="true"
                          TextChanged="TextChanged">
            </MudTextField>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="TRequest.TaxIdentificationNumber"
                          Placeholder="@L["Search for TaxIdentificationNumber"]"
                          Clearable="true"
                          TextChanged="TextChanged">
            </MudTextField>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="TRequest.IBAN"
                          Placeholder="@L["Search for IBAN"]"
                          Clearable="true"
                          TextChanged="TextChanged">
            </MudTextField>
        </MudItem>

     </MudGrid>
</MudExpansionPanel>

@code {
    [EditorRequired][Parameter] public SuppliersWithPaginationQuery TRequest { get; set; } = null!;
    [EditorRequired][Parameter] public EventCallback<string> OnConditionChanged { get; set; }
    private bool _advancedSearchExpanded;
    private async Task TextChanged(string str)
    {
        if (_advancedSearchExpanded)
        {
          await OnConditionChanged.InvokeAsync(str);
        }
    }
}