
@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.Steps.Caching
@using CleanArchitecture.Blazor.Application.Features.Steps.DTOs
@using CleanArchitecture.Blazor.Application.Features.Steps.Mappers
@using CleanArchitecture.Blazor.Application.Features.Steps.Queries.GetById
@using CleanArchitecture.Blazor.Application.Features.Steps.Specifications
@using CleanArchitecture.Blazor.Application.Features.Steps.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Steps.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.Steps.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.Steps.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Steps.Commands.AddEdit
@using CleanArchitecture.Blazor.Server.UI.Pages.Steps.Components

@inject IStringLocalizer<Steps> L
@attribute [Authorize(Policy = Permissions.Steps.View)]


<MudDialog>
    <DialogContent>

        <MudDataGrid @ref="_table"
                     FixedHeader="true"
                     FixedFooter="false"
                     Height="calc(100vh - 300px)"
                     @bind-RowsPerPage="_defaultPageSize"
                     Hover="true"
                     SelectOnRowClick="false"
                     MultiSelection="true"
                     @bind-SelectedItems="_selectedItems"
                     Loading="@_loading"
                     ServerData="@(ServerReload)">

            <Columns>

                <PropertyColumn Property="x => x.Content" Title="@L[_currentDto.GetMemberDescription(x => x.Content)]"
                                CellStyle="min-width: 600px;">

                    <CellTemplate Context="context">

                            <MudTextField Lines="5" 
                                      @bind-Value="@context.Item.Content" For="@(() => @context.Item.Content)"
                                          Required="true" RequiredError="@L["name is required!"]"></MudTextField>

                    </CellTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.Delete" Title="@L[_currentDto.GetMemberDescription(x => x.Delete)]"
                                Width="10%">
                    <CellTemplate>
                        <div>
                            <MudStack Row>
                                <MudButton Size="@Size.Small" Variant="@Variant.Filled" 
                                           Color="@Color.Primary">Delete </MudButton>
                            </MudStack>
                        </div>
                    </CellTemplate>
                </PropertyColumn>


            </Columns>

            <PagerContent>
                <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50, 100, 500, 1000 })" />
            </PagerContent>

        </MudDataGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;

    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<CommentDto> _selectedItems = new HashSet<CommentDto>();
    private MudDataGrid<CommentDto> _table = default!;
    private CommentDto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _exporting;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }
    [CascadingParameter(Name = "LocalTimezoneOffset")]
    private TimeSpan _localTimezoneOffset { get; set; }

    [Parameter]
    public GetCommentByIdQuery Query { get; set; } = new();

    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch = false;
    private bool _canCreate = false;
    private bool _canEdit = true;
    private bool _canDelete = false;
    private bool _canImport = false;
    private bool _canExport = false;

    [Parameter]
    public int StepId { get; set; }
    private bool _saving = false;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        // _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Create)).Succeeded;
        // _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Search)).Succeeded;
        // _canEdit   = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Edit)).Succeeded;
        // _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Delete)).Succeeded;
        // _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Import)).Succeeded;
        // _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Export)).Succeeded;
    }

    void Cancel() => MudDialog.Cancel();

    async Task Submit()
    {
        try
        {
            _saving = true;


            // var result = await Mediator.Send(model);

            // result.Match(data =>
            // {
            //     MudDialog.Close(DialogResult.Ok(true));
            //     Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
            //     return 1;

            // }, errors =>
            // {
            //     Snackbar.Add(errors, MudBlazor.Severity.Error);
            //     return -1;
            // });
        }
        finally
        {
            _saving = false;
        }
    }
    private async Task<GridData<CommentDto>> ServerReload(GridState<CommentDto> state)
    {
        try
        {
            _loading = true;
            Query.StepId = StepId;
           
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<CommentDto>() { TotalItems = result.Data.TotalItems, Items = result.Data.Items.ToList() };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        // Query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnChangedListView(StepListView listview)
    {
        // Query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        StepCacheKey.Refresh();
        _selectedItems = new();
        // Query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }
    private async Task ShowEditFormDialog(string title, AddEditStepCommand command)
    {
        var parameters = new DialogParameters<StepFormDialog>
            {
                { x=>x.model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<StepFormDialog>(title, parameters, options);
        var state = await dialog.Result;

        if (state != null && !state.Canceled)
        {
            await _table.ReloadServerData();
            _selectedItems.Clear();
        }
    }

    private async Task ShowCommentEditFormDialog(string title, AddEditCommentCommand command)
    {
        var parameters = new DialogParameters<CommentDialog>
            {
                { x=>x.model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CommentDialog>(title, parameters, options);
        var state = await dialog.Result;

        if (state != null && !state.Canceled)
        {

        }
    }

    private void OnView(StepDto dto)
    {
        Navigation.NavigateTo($"/pages/Steps/view/{dto.Id}");
    }
    private async Task OnCreate()
    {
        var command = new AddEditStepCommand();
        await ShowEditFormDialog(string.Format(ConstantString.CreateAnItem, L["Step"]), command);
    }

    private async Task OnEdit(StepDto dto)
    {
        Navigation.NavigateTo($"/pages/Steps/edit/{dto.Id}");
    }

    private async Task OnDelete(StepDto dto)
    {
        var contentText = string.Format(ConstantString.DeleteConfirmation, dto.Name);
        var command = new DeleteStepCommand(new int[] { dto.Id });
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText, async () =>
        {
            await InvokeAsync(async () =>
            {
                await _table.ReloadServerData();
                _selectedItems.Clear();
            });
        });
    }

    private async Task OnDeleteChecked()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmWithSelected, _selectedItems.Count);
        var command = new DeleteStepCommand(_selectedItems.Select(x => x.Id).ToArray());
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText, async () =>
        {
            await InvokeAsync(async () =>
            {
                await _table.ReloadServerData();
                _selectedItems.Clear();
            });
        });
    }


}
