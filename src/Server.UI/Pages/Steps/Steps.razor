@page "/pages/Steps"

@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.Steps.Caching
@using CleanArchitecture.Blazor.Application.Features.Steps.DTOs
@using CleanArchitecture.Blazor.Application.Features.Steps.Mappers
@using CleanArchitecture.Blazor.Application.Features.Steps.Specifications
@using CleanArchitecture.Blazor.Application.Features.Steps.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Steps.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.Steps.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.Steps.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Steps.Commands.AddEdit
@using CleanArchitecture.Blazor.Server.UI.Pages.Steps.Components

@inject IStringLocalizer<Steps> L
@attribute [Authorize(Policy = Permissions.Steps.View)]
<PageTitle>@Title</PageTitle>


<MudDataGrid @ref="_table"
             FixedHeader="true"
             FixedFooter="false"
             Height="calc(100vh - 300px)"
             @bind-RowsPerPage="_defaultPageSize"
             Hover="true"
             SelectOnRowClick="false"
             MultiSelection="true"
             @bind-SelectedItems="_selectedItems"
             Loading="@_loading"
             ServerData="@(ServerReload)">

    <ToolBarContent>
        <MudStack Row Spacing="0" Class="flex-grow-1" Justify="Justify.SpaceBetween">
            <MudStack Row AlignItems="AlignItems.Start">
                <MudIcon Icon="@Icons.Material.Filled.SwitchAccount" Size="Size.Large" />
                <MudStack Spacing="0">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">@Title</MudText>
                </MudStack>
            </MudStack>
        </MudStack>
    </ToolBarContent>

    <Columns>
        <SelectColumn ShowInFooter="false"></SelectColumn>

        <PropertyColumn Property="x => x.Name" Title="@L[_currentDto.GetMemberDescription(x => x.Name)]">
            <CellTemplate Context="context">
                <MudText Typo="Typo.body1">@context.Item.Name</MudText>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.IsCompleted" Title="@L[_currentDto.GetMemberDescription(x => x.IsCompleted)]">
            <CellTemplate>
                <div>
                    @if (!context.Item.IsCompleted)
                    {
                        <MudTooltip Text="@L["Click to change status to active."]" Delay="300">
                            <MudSwitch T="bool" Value="context.Item.IsCompleted" ValueChanged="@(()=>SetActive(context.Item))"
                                       ThumbIcon="@Icons.Material.Filled.Close" ThumbIconColor="Color.Error">
                            </MudSwitch>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="@L["Click to change status to inactive."]" Delay="300">
                            <MudSwitch T="bool" Value="context.Item.IsCompleted" ValueChanged="@(()=>SetActive(context.Item))"
                                       ThumbIcon="@Icons.Material.Filled.Done" ThumbIconColor="Color.Success">
                            </MudSwitch>

                        </MudTooltip>
                    }
                </div>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.Comments" Title="@L[_currentDto.GetMemberDescription(x => x.Comments)]">
            <CellTemplate>
                <div>
                    <MudStack Row>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" OnClick="@AddComment" Color="@Color.Primary">Add Comments</MudButton>
                    </MudStack>
                </div>
            </CellTemplate>
        </PropertyColumn>

    </Columns>

    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50, 100, 500, 1000 })" />
    </PagerContent>

</MudDataGrid>



@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<StepDto> _selectedItems = new HashSet<StepDto>();
    private MudDataGrid<StepDto> _table = default!;
    private StepDto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _exporting;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }
    [CascadingParameter(Name = "LocalTimezoneOffset")]
    private TimeSpan _localTimezoneOffset { get; set; }

    private StepsWithPaginationQuery Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch = false;
    private bool _canCreate = false;
    private bool _canEdit = true;
    private bool _canDelete = false;
    private bool _canImport = false;
    private bool _canExport = false;

    [Parameter]
    public int InvoiceId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        // _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Create)).Succeeded;
        // _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Search)).Succeeded;
        // _canEdit   = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Edit)).Succeeded;
        // _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Delete)).Succeeded;
        // _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Import)).Succeeded;
        // _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Steps.Export)).Succeeded;
    }

    private async Task SetActive(StepDto item)
    {
        item.IsCompleted = !item.IsCompleted;

        try
        {
            var result = await Mediator.Send(new AddEditStepCommand
                {
                    Id = item.Id,
                    InvoiceId = item.InvoiceId,
                    IsCompleted = item.IsCompleted,
                    Name = item.Name
                });

            result.Match(data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return -1;
            });
        }
        finally
        {

        }

    }

    private async  Task AddComment()
    {
        var command = new AddEditCommentCommand();
        await ShowCommentEditFormDialog(string.Format(ConstantString.CreateAnItem, L["Comments"]), command);
    }

    private async Task<GridData<StepDto>> ServerReload(GridState<StepDto> state)
    {
        try
        {
            _loading = true;
            Query.InvoiceId = InvoiceId;
            Query.CurrentUser = UserProfile;
            Query.OrderBy = "Id";
            Query.SortDirection = "Id";
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            Query.LocalTimezoneOffset = _localTimezoneOffset;
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<StepDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        Query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnChangedListView(StepListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        StepCacheKey.Refresh();
        _selectedItems = new();
        Query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }
    private async Task ShowEditFormDialog(string title, AddEditStepCommand command)
    {
        var parameters = new DialogParameters<StepFormDialog>
            {
                { x=>x.model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<StepFormDialog>(title, parameters, options);
        var state = await dialog.Result;

        if (state != null && !state.Canceled)
        {
            await _table.ReloadServerData();
            _selectedItems.Clear();
        }
    }

    private async Task ShowCommentEditFormDialog(string title, AddEditCommentCommand command)
    {
        var parameters = new DialogParameters<CommentDialog>
            {
                { x=>x.model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CommentDialog>(title, parameters, options);
        var state = await dialog.Result;

        if (state != null && !state.Canceled)
        {

        }
    }

    private void OnView(StepDto dto)
    {
        Navigation.NavigateTo($"/pages/Steps/view/{dto.Id}");
    }
    private async Task OnCreate()
    {
        var command = new AddEditStepCommand();
        await ShowEditFormDialog(string.Format(ConstantString.CreateAnItem, L["Step"]), command);
    }
    private async Task OnClone()
    {
        var dto = _selectedItems.First();
        var command = StepMapper.CloneFromDto(dto);
        await ShowEditFormDialog(string.Format(ConstantString.CreateAnItem, L["Step"]), command);
    }
    private async Task OnEdit(StepDto dto)
    {
        Navigation.NavigateTo($"/pages/Steps/edit/{dto.Id}");
    }

    private async Task OnDelete(StepDto dto)
    {
        var contentText = string.Format(ConstantString.DeleteConfirmation, dto.Name);
        var command = new DeleteStepCommand(new int[] { dto.Id });
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText, async () =>
        {
            await InvokeAsync(async () =>
            {
                await _table.ReloadServerData();
                _selectedItems.Clear();
            });
        });
    }

    private async Task OnDeleteChecked()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmWithSelected, _selectedItems.Count);
        var command = new DeleteStepCommand(_selectedItems.Select(x => x.Id).ToArray());
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText, async () =>
        {
            await InvokeAsync(async () =>
            {
                await _table.ReloadServerData();
                _selectedItems.Clear();
            });
        });
    }

    private async Task OnExport()
    {
        _exporting = true;
        var request = new ExportStepsQuery()
            {
                Keyword = Query.Keyword,
                CurrentUser = UserProfile,
                ListView = Query.ListView,
                OrderBy = _table.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
                SortDirection = (_table.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
            };
        var result = await Mediator.Send(request);
        await result.MatchAsync<byte[]>(
            async data =>
            {
                var downloadresult = await BlazorDownloadFileService.DownloadFile($"{L["Steps"]}.xlsx", result.Data, contentType: "application/octet-stream");
                Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
                return data;
            },
            errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.FromResult(Array.Empty<byte>());
            });
        _exporting = false;
    }
    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var command = new ImportStepsCommand(file.Name, stream.ToArray());
        var result = await Mediator.Send(command);
        await result.MatchAsync(
            async data =>
            {
                await _table.ReloadServerData();
                Snackbar.Add($"{ConstantString.ImportSuccess}", MudBlazor.Severity.Info);
                return data;
            }, errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.FromResult(0);
            });
        _uploading = false;
    }

}
