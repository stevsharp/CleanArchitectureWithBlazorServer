@using CleanArchitecture.Blazor.Application.Features.PricingModels.Commands.AddEdit

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<PricingModels> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@_model" @ref="@_pricingmodelForm" Validation="@(Validator.ValidateValue(_model))">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                <MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Name)]" @bind-Value="_model.Name" For="@(() => _model.Name)" Required="true" RequiredError="@L["name is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudEnumSelect TEnum="Nullable<PricingModelType>" Label="@L[_model.GetMemberDescription(x=>x.Type)]" @bind-Value="_model.Type" For="@(() => _model.Type)" Required="false" RequiredError="@L["type is required!"]"></MudEnumSelect>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.FormulaExpression)]" @bind-Value="_model.FormulaExpression" For="@(() => _model.FormulaExpression)" Required="false" RequiredError="@L["formula expression is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[_model.GetMemberDescription(x=>x.MinFee)]" @bind-Value="_model.MinFee" For="@(() => _model.MinFee)" Min="0.00m" Required="false" RequiredError="@L["min fee is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Notes)]" @bind-Value="_model.Notes" For="@(() => _model.Notes)" Required="false" RequiredError="@L["notes is required!"]"></MudTextField>
                </MudItem> 

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="OnSaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="OnSubmit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _pricingmodelForm;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    [EditorRequired] [Parameter] public AddEditPricingModelCommand _model { get; set; } = null!;
    async Task OnSubmit()
    {
        try
        {
            _saving = true;
            await _pricingmodelForm!.Validate().ConfigureAwait(false);
            if (!_pricingmodelForm!.IsValid)
                return;
            var result = await Mediator.Send(_model);
            result.Match(data =>
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
            });
        }
        finally
        {
            _saving = false;
        }
    }
    async Task OnSaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _pricingmodelForm!.Validate().ConfigureAwait(false);
            if (!_pricingmodelForm!.IsValid)
               return;
            var result = await Mediator.Send(_model);
            await result.MatchAsync(async data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                _model = new AddEditPricingModelCommand() { };
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}