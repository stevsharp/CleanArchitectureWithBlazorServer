@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.SubCategories.Caching
@using CleanArchitecture.Blazor.Application.Features.SubCategories.DTOs
@using CleanArchitecture.Blazor.Application.Features.SubCategories.Mappers
@using CleanArchitecture.Blazor.Application.Features.SubCategories.Specifications
@using CleanArchitecture.Blazor.Application.Features.SubCategories.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.SubCategories.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.SubCategories.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.SubCategories.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.SubCategories.Commands.AddEdit
@using CleanArchitecture.Blazor.Server.UI.Pages.SubCategories.Components

@inject IStringLocalizer<CategorySubCategory> L
@attribute [Authorize(Policy = Permissions.SubCategories.View)]
<PageTitle>@Title</PageTitle>

<MudDataGrid ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="true"
             Virtualize="true"
             @bind-RowsPerPage="_defaultPageSize"
             Height="calc(100vh - 330px)"
             Loading="@_loading"
             MultiSelection="true"
             T="SubCategoryDto"
             SelectOnRowClick="false"
             @bind-SelectedItems="_selectedItems"
             @bind-SelectedItem="_currentDto"
             Hover="true" @ref="_table">
    <ToolBarContent>
        <MudStack Row Spacing="0" Class="flex-grow-1" Justify="Justify.SpaceBetween">
            <MudStack Row AlignItems="AlignItems.Start">
                <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                <MudStack Spacing="0">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">@Title</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="SubCategoryListView" 
                        ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="@L["List View"]">
                    </MudEnumSelect>
                </MudStack>
            </MudStack>
            <MudStack Spacing="0" AlignItems="AlignItems.End">
                <MudToolBar Dense WrapContent="true" Class="py-1 px-0">
                    <MudButton Disabled="@_loading"
                               OnClick="@(() => OnRefresh())"
                               StartIcon="@Icons.Material.Outlined.Refresh">
                        @ConstantString.Refresh
                    </MudButton>
                </MudToolBar>
                <MudStack Row Spacing="1">
                    @if (_canSearch)
                    {
                        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Value="@Query.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                        </MudTextField>
                    }
                </MudStack>
            </MudStack>
        </MudStack>
    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false"></SelectColumn>

        @*TODO: Define the fields that should be displayed in data table*@
        <PropertyColumn Property="x => x.Name" Title="@L[_currentDto.GetMemberDescription(x=>x.Name)]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body1">@context.Item.Name</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.IsChecked" Title="@L[_currentDto.GetMemberDescription(x => x.IsChecked)]">
            <CellTemplate>
                <div>
                    @if (!context.Item.IsChecked)
                    {
                        <MudTooltip Text="@L["Click to change status to active."]" Delay="300">
                            <MudSwitch T="bool" Value="context.Item.IsChecked" ValueChanged="@(()=>SetActive(context.Item))"
                                       ThumbIcon="@Icons.Material.Filled.Close" ThumbIconColor="Color.Error">
                            </MudSwitch>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="@L["Click to change status to inactive."]" Delay="300">
                            <MudSwitch T="bool" Value="context.Item.IsChecked" ValueChanged="@(()=>SetActive(context.Item))"
                                       ThumbIcon="@Icons.Material.Filled.Done" ThumbIconColor="Color.Success">
                            </MudSwitch>

                        </MudTooltip>
                    }
                </div>
            </CellTemplate>
        </PropertyColumn>


    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
    </PagerContent>
</MudDataGrid>



@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 10;
    private HashSet<SubCategoryDto> _selectedItems = new HashSet<SubCategoryDto>();
    private MudDataGrid<SubCategoryDto> _table = default!;
    private SubCategoryDto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _exporting;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }
    [CascadingParameter(Name = "LocalTimezoneOffset")]
    private TimeSpan _localTimezoneOffset { get; set; }

    [Parameter]
    public EventCallback<List<SubCategoryDto>> OnSubSelected { get; set; }

    private SubCategoriesWithPaginationQuery Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.SubCategories.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.SubCategories.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.SubCategories.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.SubCategories.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.SubCategories.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.SubCategories.Export)).Succeeded;
    }
    private async Task<GridData<SubCategoryDto>> ServerReload(GridState<SubCategoryDto> state)
    {
        try
        {
            _loading = true;
            Query.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            Query.LocalTimezoneOffset = _localTimezoneOffset;
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<SubCategoryDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        Query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnChangedListView(SubCategoryListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        SubCategoryCacheKey.Refresh();
        _selectedItems = new();
        Query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }
    private async Task ShowEditFormDialog(string title, AddEditSubCategoryCommand command)
    {
        var parameters = new DialogParameters<SubCategoryFormDialog>
            {
                { x=>x.model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<SubCategoryFormDialog>(title, parameters, options);
        var state = await dialog.Result;

        if (state != null && !state.Canceled)
        {
            await _table.ReloadServerData();
            _selectedItems.Clear();
        }
    }

    private async Task OnDeleteChecked()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmWithSelected, _selectedItems.Count);
        var command = new DeleteSubCategoryCommand(_selectedItems.Select(x => x.Id).ToArray());
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText, async () =>
        {
            await InvokeAsync(async () =>
            {
                await _table.ReloadServerData();
                _selectedItems.Clear();
            });
        });
    }

    private async Task SetActive(SubCategoryDto item)
    {
        item.IsChecked = !item.IsChecked;

        if (!_selectedItems.Add(item))
        {
            _selectedItems.Remove(item);
            _selectedItems.Add(item); // Re-add to update reference
        }
        
        await OnSubSelected.InvokeAsync(_selectedItems.ToList());
    }

}