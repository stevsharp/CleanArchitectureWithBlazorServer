@page "/pages/quotes/create"
@using CleanArchitecture.Blazor.Application.Features.Quotes.Commands.Create

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<Quotes> L
@* @attribute [Authorize(Policy = Permissions.Quotes.Create)] *@

<PageTitle>@Title</PageTitle>
<Breadcrumbs OnSaveButtonClick="OnSubmit" Saving="_saving" BreadcrumbItems="_breadcrumbItems"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Large">
    <MudCard Class="pa-2">
        <MudCardHeader>
            <CardHeaderContent>
                 <MudText Typo="Typo.h6">@Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
        <MudForm Model="@_model" @ref="@_quoteForm" Validation="@(Validator.ValidateValue(_model))">
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[_model.GetMemberDescription(x=>x.CompanyId)]" @bind-Value="_model.CompanyId" For="@(() => _model.CompanyId)" Min="0" Required="false" RequiredError="@L["company id is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Title)]" @bind-Value="_model.Title" For="@(() => _model.Title)" Required="false" RequiredError="@L["title is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[_model.GetMemberDescription(x=>x.OwnerId)]" @bind-Value="_model.OwnerId" For="@(() => _model.OwnerId)" Min="0" Required="false" RequiredError="@L["owner id is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudEnumSelect TEnum="Nullable<QuoteStatus>" Label="@L[_model.GetMemberDescription(x=>x.Status)]" @bind-Value="_model.Status" For="@(() => _model.Status)" Required="false" RequiredError="@L["status is required!"]"></MudEnumSelect>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudDatePicker Label="@L[_model.GetMemberDescription(x=>x.ValidUntil)]" @bind-Date="_model.ValidUntil" For="@(() => _model.ValidUntil)" Required="false" RequiredError="@L["valid until is required!"]"></MudDatePicker>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Currency)]" @bind-Value="_model.Currency" For="@(() => _model.Currency)" Required="false" RequiredError="@L["currency is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[_model.GetMemberDescription(x=>x.TotalAmount)]" @bind-Value="_model.TotalAmount" For="@(() => _model.TotalAmount)" Min="0.00m" Required="false" RequiredError="@L["total amount is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[_model.GetMemberDescription(x=>x.MarginPct)]" @bind-Value="_model.MarginPct" For="@(() => _model.MarginPct)" Min="0.00m" Required="false" RequiredError="@L["margin pct is required!"]"></MudNumericField >
                </MudItem> 

            </MudGrid>
        </MudForm>
        </MudCardContent>
         <MudCardActions Class="d-flex justify-end gap-2">
                    <MudLoadingButton Color="Color.Primary" DropShadow="false" Loading="@_saving" OnClick="OnSubmit">@ConstantString.Save</MudLoadingButton>
         </MudCardActions>
        </MudCard>
</MudContainer>
 

@code {
    public string? Title { get; private set; }
    MudForm? _quoteForm;
    private bool _saving = false;
    private List<BreadcrumbItem>? _breadcrumbItems;
    private CreateQuoteCommand _model = new();
    protected override Task OnInitializedAsync()
    {
        Title = L["New Quote"];
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(L["Home"], href: "/"),
            new BreadcrumbItem(L["Quotes"], href: "/pages/quotes"),
            new BreadcrumbItem(L["Create Quote"], href:null, disabled:true)
        };
        return Task.CompletedTask;
    }
    async Task OnSubmit()
    {
        try
        {
            _saving = true;
            await _quoteForm!.Validate().ConfigureAwait(false);
            if (!_quoteForm!.IsValid)
                return;
            var result = await Mediator.Send(_model);
            result.Match(
                data=>
                {
                    Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                    Navigation.NavigateTo($"/pages/Quotes");
                },
                errors=>
                {
                    Snackbar.Add(errors, MudBlazor.Severity.Error);
                });
        }
        finally
        {
            _saving = false;
        }
    }
}