@using CleanArchitecture.Blazor.Application.Features.Products.Caching
@using CleanArchitecture.Blazor.Application.Features.Products.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.Products.Queries.GetAll
@using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Commands.AddEdit
@using CleanArchitecture.Blazor.Server.UI.Components.Purchase
@using CleanArchitecture.Blazor.Server.UI.Pages.Products.Components

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<PurchaseItems> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>

                <MudItem xs="12" md="6"> 
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.ItemCode)]" 
                    @bind-Value="model.ItemCode" For="@(() => model.ItemCode)" 
                    Required="false" RequiredError="@L["item code is required!"]"></MudTextField>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudTextField  Label="@L[model.GetMemberDescription(x=>x.ItemDescription)]" 
                    @bind-Value="model.ItemDescription" 
                    For="@(() => model.ItemDescription)" 
                    Required="false" RequiredError="@L["item description is required!"]"></MudTextField>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.Quantity)]" 
                    @bind-Value="model.Quantity" For="@(() => model.Quantity)" 
                    Min="0" Required="false" RequiredError="@L["quantity is required!"]"></MudNumericField >
                </MudItem> 


                <MudItem xs="12" md="6">
                    <PicklistAutocomplete Picklist="Picklist.Unit" T="string"
                    Label="@L["Unit"]"
                    For="@(() => model.Unit)"
                    ResetValueOnEmptyText="true"
                    ShowProgressIndicator="true"
                    @bind-Value="model.Unit">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="MudBlazor.Size.Small" Indeterminate="true" />
                        </ProgressIndicatorTemplate>
                    </PicklistAutocomplete>
                </MudItem>

                <MudItem xs="12" md="6">
                    <PicklistAutocomplete Picklist="Picklist.Color" T="string"
                    Label="@L["Color"]"
                    For="@(() => model.Color)"
                    ResetValueOnEmptyText="true"
                    ShowProgressIndicator="true"
                    @bind-Value="model.Color">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="MudBlazor.Size.Small" Indeterminate="true" />
                        </ProgressIndicatorTemplate>
                    </PicklistAutocomplete>
                </MudItem>

                <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.UnitPrice)]"
                    @bind-Value="model.UnitPrice" For="@(() => model.UnitPrice)" Min="0.00m" 
                    Required="false" RequiredError="@L["unit price is required!"]"></MudNumericField >
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.VATPercentage)]" 
                    @bind-Value="model.VATPercentage" For="@(() => model.VATPercentage)"
                    Min="0.00m" Required="false" RequiredError="@L["vat percentage is required!"]"></MudNumericField >
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudNumericField Disabled="true" Label="@L[model.GetMemberDescription(x=>x.VATAmount)]" 
                    Value="model.VATAmount" 
                    Required="false" RequiredError="@L["vat amount is required!"]"></MudNumericField >
                </MudItem> 
                <MudItem xs="12" md="6">
                    <MudNumericField Disabled="true" Label="@L[model.GetMemberDescription(x=>x.TotalAmount)]"
                    Value="model.TotalAmount"  
                    Required="false" RequiredError="@L["total amount is required!"]"></MudNumericField >
                </MudItem> 

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    AddEditPurchaseItemCommandValidator _modelValidator = new ();
    [EditorRequired] 
    [Parameter] 
    public AddEditPurchaseItemCommand model { get; set; } = null!;

    private IDisposable? _itemCodeSubscription;

    protected override Task OnInitializedAsync()
    {
        SubscribeToItemCodeChanges();
        return Task.CompletedTask;
    }

    private void SubscribeToItemCodeChanges()
    {
        _itemCodeSubscription?.Dispose(); // Unsubscribe previous, if any
        _itemCodeSubscription = model.ItemCodeChanged.Subscribe(async newValue =>
        {
            if (string.IsNullOrWhiteSpace(newValue))
                return;

            ProductCacheKey.Refresh();

            await OnItemCodeChanged(newValue);
        });
    }


    protected async Task OnItemCodeChanged(string newValue)
    {
        if (string.IsNullOrWhiteSpace(newValue))
            return;
        var query = new GetProductByCodeQuery { Code = newValue };
        var result = await Mediator.Send(query);

        if (result is not null)
        {
            model.ItemDescription = result.Name;
            model.UnitPrice = result.RetailPrice.GetValueOrDefault(0);
            model.ProductId = result.Id;

            StateHasChanged();
        }
        else
        {
            var command = new AddEditProductCommand { Pictures = new List<ProductImage>() };

            command.Code = newValue;

            await ShowEditFormDialog(string.Format(ConstantString.CreateAnItem, L["Product"]), command);

        }

    }

    private async Task ShowEditFormDialog(string title, AddEditProductCommand command)
    {
        var parameters = new DialogParameters<ProductFormDialog>
        {
            { x => x.Model, command }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ProductFormDialog>(title, parameters, options);
        var state = await dialog.Result;

        if (state is not null && !state.Canceled)
        {
            var result = state.Data as AddEditProductCommand;

            if (result is not null)
            {
                model.ItemCode = result.Code ?? "no code";
                model.ItemDescription = result.Description;
            }
        }
    }

    public void Dispose()
    {
        _itemCodeSubscription?.Dispose();
    }



    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(model);
            result.Match(data =>
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return -1;
            });
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;
            var result = await Mediator.Send(model);
            await result.MatchAsync(async data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditPurchaseItemCommand() { };
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return Task.FromResult(-1);
            });
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}