@using CleanArchitecture.Blazor.Application.Features.PurchaseItems.Commands.AddEdit

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<PurchaseItems> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                <MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.InvoiceId)]" @bind-Value="model.InvoiceId" For="@(() => model.InvoiceId)" Min="0" Required="false" RequiredError="@L["invoice id is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.ItemCode)]" @bind-Value="model.ItemCode" For="@(() => model.ItemCode)" Required="false" RequiredError="@L["item code is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.ItemDescription)]" @bind-Value="model.ItemDescription" For="@(() => model.ItemDescription)" Required="false" RequiredError="@L["item description is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.Quantity)]" @bind-Value="model.Quantity" For="@(() => model.Quantity)" Min="0" Required="false" RequiredError="@L["quantity is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.Unit)]" @bind-Value="model.Unit" For="@(() => model.Unit)" Required="false" RequiredError="@L["unit is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.Color)]" @bind-Value="model.Color" For="@(() => model.Color)" Required="false" RequiredError="@L["color is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.UnitPrice)]" @bind-Value="model.UnitPrice" For="@(() => model.UnitPrice)" Min="0.00m" Required="false" RequiredError="@L["unit price is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.VATPercentage)]" @bind-Value="model.VATPercentage" For="@(() => model.VATPercentage)" Min="0.00m" Required="false" RequiredError="@L["vat percentage is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.VATAmount)]" @bind-Value="model.VATAmount" For="@(() => model.VATAmount)" Min="0.00m" Required="false" RequiredError="@L["vat amount is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.TotalAmount)]" @bind-Value="model.TotalAmount" For="@(() => model.TotalAmount)" Min="0.00m" Required="false" RequiredError="@L["total amount is required!"]"></MudNumericField >
                </MudItem> 

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    AddEditPurchaseItemCommandValidator _modelValidator = new ();
    [EditorRequired] [Parameter] public AddEditPurchaseItemCommand model { get; set; } = null!;
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(model);
            result.Match(data =>
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return -1;
            });
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;
            var result = await Mediator.Send(model);
            await result.MatchAsync(async data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditPurchaseItemCommand() { };
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return Task.FromResult(-1);
            });
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}