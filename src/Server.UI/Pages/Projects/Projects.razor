@page "/pages/projects"

@using CleanArchitecture.Blazor.Application.Features.Projects.Caching
@using CleanArchitecture.Blazor.Application.Features.Projects.DTOs
@using CleanArchitecture.Blazor.Application.Features.Projects.Specifications
@using CleanArchitecture.Blazor.Application.Features.Projects.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Projects.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.Projects.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.Projects.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Projects.Commands.AddEdit
@using CleanArchitecture.Blazor.Infrastructure.PermissionSet
@using CleanArchitecture.Blazor.Server.UI.Pages.Projects.Components

@inject IStringLocalizer<Projects> L
@inject BlazorDownloadFileService BlazorDownloadFileService

@* @attribute [Authorize(Policy = Permissions.Projects.View)] *@
<PageTitle>@Title</PageTitle>

<MudDataGrid ServerData="@(ServerReload)"
                  FixedHeader="true"
                  FixedFooter="false"
                  Virtualize="false"
                  @bind-RowsPerPage="_defaultPageSize"
                  Loading="@_loading"
                  MultiSelection="true"
                  T="ProjectDto"
                  SelectOnRowClick="false"
                  RowClick="@(s=>OnDataGridRowClick(s.Item))"
                  @bind-SelectedItems="_selectedProjects"
                  Hover="true" @ref="_projectsGrid">
            <ToolBarContent>
                 <MudStack Row Spacing="0" Class="flex-grow-1" Justify="Justify.SpaceBetween">
            <MudStack Row AlignItems="AlignItems.Start">
                <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                <MudStack Spacing="0">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">@Title</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="ProjectListView" ValueChanged="OnListViewChanged" Value="_projectsQuery.ListView" Dense="true" Label="@L["List View"]">
                    </MudEnumSelect>
                </MudStack>
            </MudStack>
            <MudStack Spacing="0" AlignItems="AlignItems.End">
                <MudToolBar Dense WrapContent="true" Class="py-1 px-0">
                    <MudButton Disabled="@_loading"
                               OnClick="@(() => OnRefresh())"
                               StartIcon="@Icons.Material.Outlined.Refresh">
                        @ConstantString.Refresh
                    </MudButton>
                    @if (_accessRights.Create)
                    {
                        <MudButton StartIcon="@Icons.Material.Outlined.Add"
                                   OnClick="OnCreate">
                            @ConstantString.New
                        </MudButton>
                    }
                    <MudMenu TransformOrigin="Origin.BottomRight" AnchorOrigin="Origin.BottomRight" EndIcon="@Icons.Material.Filled.MoreVert" Label="@ConstantString.More">
                        @if (_accessRights.Create)
                        {
                            <MudMenuItem Disabled="@(_selectedProjects.Count != 1)" OnClick="OnCloneProject">@ConstantString.Clone</MudMenuItem>
                        }
                        @if (_accessRights.Delete)
                        {
                            <MudMenuItem Disabled="@(!(_selectedProjects.Count > 0))"
                                         OnClick="OnDeleteSelectedProjects">
                                @ConstantString.Delete
                            </MudMenuItem>
                        }
                        @if (_accessRights.Export)
                        {
                            <MudMenuItem Disabled="@_exporting"
                                         OnClick="OnExport">
                                @ConstantString.Export
                            </MudMenuItem>
                        }
                        @if (_accessRights.Import)
                        {
                            <MudMenuItem>
                                <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx">
                                    <ActivatorContent>
                                        <MudButton Class="pa-0 ma-0" Style="font-weight:400;text-transform:none;"
                                                   Variant="Variant.Text"
                                                   Disabled="@_uploading">
                                            @ConstantString.Import
                                        </MudButton>
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudMenuItem>
                        }
                    </MudMenu>
                </MudToolBar>
                <MudStack Row Spacing="1">
                    @if (_accessRights.Search)
                    {
                        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Value="@_projectsQuery.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                        </MudTextField>
                    }
                </MudStack>
            </MudStack>
        </MudStack>
            </ToolBarContent>
            <Columns>
                <SelectColumn ShowInFooter="false"></SelectColumn>
                <TemplateColumn HeaderStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
                    <CellTemplate>
                        @if (_accessRights.Edit || _accessRights.Delete)
                        {
                            <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small"
                                     Dense="true"
                                     EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                                @if (_accessRights.Edit)
                                {
                                    <MudMenuItem OnClick="@(()=>OnEditProject(context.Item))">@ConstantString.Edit</MudMenuItem>
                                }
                                @if (_accessRights.Delete)
                                {
                                    <MudMenuItem OnClick="@(()=>OnDeleteProject(context.Item))">@ConstantString.Delete</MudMenuItem>
                                }
                            </MudMenu>
                        }
                        else
                        {
                            <MudIconButton Variant="Variant.Filled"  
                                       Disabled="true"
                                       Icon="@Icons.Material.Filled.DoNotTouch"
                                       Size="Size.Small"
                                       Color="Color.Surface">
                                @ConstantString.NoAllowed
                            </MudIconButton>
                        }
                    </CellTemplate>
                </TemplateColumn>
                @*TODO: Define the fields that should be displayed in data table*@
                <PropertyColumn Property="x => x.Name" Title="@L[_projectDto.GetMemberDescription(x=>x.Name)]"> 
   <CellTemplate>
      <div class="d-flex flex-column">
        <MudText Typo="Typo.body1">@context.Item.Name</MudText>
     </div>
    </CellTemplate>
</PropertyColumn>
                <PropertyColumn Property="x => x.QuoteId" Title="@L[_projectDto.GetMemberDescription(x=>x.QuoteId)]" />
                <PropertyColumn Property="x => x.StartDate" Title="@L[_projectDto.GetMemberDescription(x=>x.StartDate)]" />
                <PropertyColumn Property="x => x.EndDate" Title="@L[_projectDto.GetMemberDescription(x=>x.EndDate)]" />
                <PropertyColumn Property="x => x.Status" Title="@L[_projectDto.GetMemberDescription(x=>x.Status)]">
                <CellTemplate>
						<MudChip T="string"  Value="@context.Item.Status?.GetDescription()" />
                </CellTemplate>
</PropertyColumn>
                <PropertyColumn Property="x => x.Budget" Title="@L[_projectDto.GetMemberDescription(x=>x.Budget)]" />
                <PropertyColumn Property="x => x.OwnerId" Title="@L[_projectDto.GetMemberDescription(x=>x.OwnerId)]" />

            </Columns>
            <NoRecordsContent>
                <MudText>@ConstantString.NoRecords</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.Loading</MudText>
            </LoadingContent>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
</MudDataGrid>



@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<ProjectDto> _selectedProjects = new HashSet<ProjectDto>();
    private MudDataGrid<ProjectDto> _projectsGrid = default!;
    private ProjectDto _projectDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _exporting;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }


    private ProjectsWithPaginationQuery _projectsQuery { get; set; } = new();
    private ProjectsAccessRights _accessRights = new();

    protected override async Task OnInitializedAsync()
    {
        Title = L[_projectDto.GetClassDescription()];
        _accessRights = await PermissionService.GetAccessRightsAsync<ProjectsAccessRights>(); 
    }
     
    private async Task<GridData<ProjectDto>> ServerReload(GridState<ProjectDto> state)
    {
        try
        {
            _loading = true;
            _projectsQuery.CurrentUser = UserProfile;
            var sortDefinition = state.SortDefinitions.FirstOrDefault();
            _projectsQuery.OrderBy = sortDefinition?.SortBy ?? "Id";
            _projectsQuery.SortDirection = (sortDefinition != null && sortDefinition.Descending)
                                      ? SortDirection.Descending.ToString()
                                      : SortDirection.Ascending.ToString();
            _projectsQuery.PageNumber = state.Page + 1;
            _projectsQuery.PageSize = state.PageSize;
            var result = await Mediator.Send(_projectsQuery).ConfigureAwait(false);
            return new GridData<ProjectDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedProjects.Clear();
        _projectsQuery.Keyword = text;
        await _projectsGrid.ReloadServerData();
    }
    private async Task OnListViewChanged(ProjectListView listview)
    {
        _projectsQuery.ListView = listview;
        await _projectsGrid.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        ProjectCacheKey.Refresh();
        _selectedProjects.Clear();
        _projectsQuery.Keyword  = string.Empty;
        await _projectsGrid.ReloadServerData();
    }
    private async Task ShowEditFormDialog(string title, AddEditProjectCommand command)
    {
        var parameters = new DialogParameters<ProjectFormDialog>
            {
                { x=>x._model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ProjectFormDialog>(title, parameters, options);
        var state = await dialog.Result;

        if (state != null && !state.Canceled)
        {
            await _projectsGrid.ReloadServerData();
            _selectedProjects.Clear();
        }
    }
    private void OnDataGridRowClick(ProjectDto dto)
    {
        Navigation.NavigateTo($"/pages/projects/view/{dto.Id}");
    }
    private async Task OnCreate()
    {
        var command = new AddEditProjectCommand();
        await ShowEditFormDialog(L["New Project"], command);
    }
    private async Task OnCloneProject()
    {
        var dto = _selectedProjects.First();
        var command = new AddEditProjectCommand()
        {
                    QuoteId = dto.QuoteId, 
        Name = dto.Name, 
        StartDate = dto.StartDate, 
        EndDate = dto.EndDate, 
        Budget = dto.Budget, 
        OwnerId = dto.OwnerId, 
        Status = dto.Status, 

        };
        await ShowEditFormDialog(L["Clone Project"], command);
    }
    private async Task OnEditProject(ProjectDto dto)
    {
       //var command = Mapper.Map<AddEditProjectCommand>(dto);
       //await ShowEditFormDialog(L["Edit Project"], command);
       Navigation.NavigateTo($"/pages/projects/edit/{dto.Id}");
    }

    private async Task OnDeleteProject(ProjectDto dto)
    {
        var contentText = string.Format(ConstantString.DeleteConfirmation, dto.Name);
        var command = new DeleteProjectCommand(new int[] { dto.Id });
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText,async () =>
        {
            await InvokeAsync(async () =>
            {
                await _projectsGrid.ReloadServerData();
                _selectedProjects.Clear();
            });
        });
    }

    private async Task OnDeleteSelectedProjects()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmWithSelected, _selectedProjects.Count);
        var command = new DeleteProjectCommand(_selectedProjects.Select(x => x.Id).ToArray());
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText,async () =>
        {
            await InvokeAsync(async () =>
            {
                await _projectsGrid.ReloadServerData();
                _selectedProjects.Clear();
            });
        });
    }

    private async Task OnExport()
    {
        _exporting = true;
        var request = new ExportProjectsQuery()
            {
                Keyword = _projectsQuery.Keyword,
                CurrentUser = UserProfile,
                ListView = _projectsQuery.ListView,
                OrderBy = _projectsGrid.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
                SortDirection = (_projectsGrid.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
            };
        var result = await Mediator.Send(request);
        await result.MatchAsync(
            async data =>
            {
                await BlazorDownloadFileService.DownloadFileAsync($"{L["Projects"]}.xlsx", result.Data, contentType:"application/octet-stream");
                Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
            },
            errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        _exporting = false;
    }
    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var command = new ImportProjectsCommand(file.Name, stream.ToArray());
        var result = await Mediator.Send(command);
        await result.MatchAsync(
            async data =>
            {
                await _projectsGrid.ReloadServerData();
                Snackbar.Add($"{ConstantString.ImportSuccess}", MudBlazor.Severity.Info);
            }, errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        _uploading = false;
    }

}
